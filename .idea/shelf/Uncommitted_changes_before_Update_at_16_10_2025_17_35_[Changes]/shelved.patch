Index: src/main/java/org/example/ucb/dao/RepositorioDeVeterinarioSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeVeterinario;\r\nimport org.example.ucb.model.Veterinario;\r\nimport org.example.ucb.model.Certificacao;\r\n\r\nimport java.sql.*;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class RepositorioDeVeterinarioSQL implements RepositorioDeVeterinario {\r\n\r\n    @Override\r\n    public void salvar(Veterinario veterinario) {\r\n        String sql = \"INSERT INTO veterinario (crmv, nome, idade, dataGraduacao) VALUES (?, ?, ?, ?)\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)){\r\n\r\n            stmt.setString(1, veterinario.getCrmv());\r\n            stmt.setString(2, veterinario.getNome());\r\n            stmt.setInt(3, veterinario.getIdade());\r\n            stmt.setDate(4, new java.sql.Date(veterinario.getDataGraduacao().getTime()));\r\n\r\n            stmt.executeUpdate();\r\n            System.out.println(\"Veterinário salvo no banco de dados com sucesso!\");\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            System.err.println(\"Erro ao salvar veterinário no banco de dados.\");\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public Veterinario BuscarVet(String crmv) {\r\n        String sql = \"SELECT * FROM veterinario WHERE crmv = ?\";\r\n        Veterinario vetEncontrado = null;\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, crmv);\r\n\r\n            try (ResultSet rs = stmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    String nome = rs.getString(\"nome\");\r\n                    int idade = rs.getInt(\"idade\");\r\n                    java.util.Date dataGraduacao = rs.getDate(\"dataGraduacao\");\r\n\r\n                    vetEncontrado = new Veterinario(crmv, nome, idade, dataGraduacao);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao buscar veterinário por CRMV.\");\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return vetEncontrado;\r\n    }\r\n\r\n    @Override\r\n    public List<Veterinario> ListarVet() {\r\n    String sql = \"SELECT * FROM veterinario\";\r\n    List<Veterinario> veterinarios = new ArrayList<>();\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n        while (rs.next()) {\r\n            String crmv = rs.getString(\"crmv\");\r\n            String nome = rs.getString(\"nome\");\r\n            int idade = rs.getInt(\"idade\");\r\n            java.util.Date dataGraduacao = rs.getDate(\"dataGraduacao\");\r\n\r\n            veterinarios.add(new Veterinario(crmv, nome, idade, dataGraduacao));\r\n        }\r\n    } catch (SQLException e) {\r\n        System.err.println(\"Erro ao listar veterinários.\");\r\n        e.printStackTrace();\r\n    } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return veterinarios;\r\n    }\r\n\r\n    @Override\r\n    public List<Veterinario> BuscarPorCertificacao(int numeroregistro) {\r\n        return List.of();\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(Veterinario veterinario) {\r\n        String sql = \"UPDATE veterinario SET nome = ?, idade = ?, dataGraduacao = ? WHERE crmv = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, veterinario.getNome());\r\n            stmt.setInt(2, veterinario.getIdade());\r\n            stmt.setDate(3, new java.sql.Date(veterinario.getDataGraduacao().getTime()));\r\n            stmt.setString(4, veterinario.getCrmv()); // O WHERE é o último\r\n\r\n            int linhasAfetadas = stmt.executeUpdate();\r\n            if (linhasAfetadas > 0) {\r\n                System.out.println(\"Veterinário atualizado com sucesso!\");\r\n            } else {\r\n                System.err.println(\"Nenhum veterinário encontrado com o CRMV informado para atualizar.\");\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao atualizar veterinário.\");\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean deletarVet(String crmv) {\r\n        String sql = \"DELETE FROM veterinario WHERE crmv = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, crmv);\r\n            int linhasAfetadas = stmt.executeUpdate();\r\n            return linhasAfetadas > 0;\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao deletar veterinário.\");\r\n            e.printStackTrace();\r\n            return false;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeVeterinarioSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeVeterinarioSQL.java
--- a/src/main/java/org/example/ucb/dao/RepositorioDeVeterinarioSQL.java	(revision 49fc59ebc73d9f07b08811705eb77afc0f32002a)
+++ b/src/main/java/org/example/ucb/dao/RepositorioDeVeterinarioSQL.java	(date 1760646925261)
@@ -26,13 +26,9 @@
             System.out.println("Veterinário salvo no banco de dados com sucesso!");
 
         }
-        catch (SQLException e) {
+        catch (Exception e) {
             System.err.println("Erro ao salvar veterinário no banco de dados.");
-            e.printStackTrace();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
         }
-
     }
 
     @Override
@@ -54,11 +50,8 @@
                     vetEncontrado = new Veterinario(crmv, nome, idade, dataGraduacao);
                 }
             }
-        } catch (SQLException e) {
+        } catch (Exception e) {
             System.err.println("Erro ao buscar veterinário por CRMV.");
-            e.printStackTrace();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
         }
         return vetEncontrado;
     }
@@ -80,12 +73,9 @@
 
             veterinarios.add(new Veterinario(crmv, nome, idade, dataGraduacao));
         }
-    } catch (SQLException e) {
-        System.err.println("Erro ao listar veterinários.");
-        e.printStackTrace();
     } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
+        System.err.println("Erro ao listar veterinários.");
+    }
         return veterinarios;
     }
 
@@ -112,11 +102,8 @@
             } else {
                 System.err.println("Nenhum veterinário encontrado com o CRMV informado para atualizar.");
             }
-        } catch (SQLException e) {
-            System.err.println("Erro ao atualizar veterinário.");
-            e.printStackTrace();
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            System.err.println("Erro ao atualizar veterinário.");
         }
     }
 
@@ -131,12 +118,9 @@
             int linhasAfetadas = stmt.executeUpdate();
             return linhasAfetadas > 0;
 
-        } catch (SQLException e) {
+        } catch (Exception e) {
             System.err.println("Erro ao deletar veterinário.");
-            e.printStackTrace();
             return false;
-        } catch (Exception e) {
-            throw new RuntimeException(e);
         }
     }
 }
Index: src/main/java/org/example/ucb/dao/RepositorioDeTratamentoSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeTratamento;\r\nimport org.example.ucb.model.Tratamento;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RepositorioDeTratamentoSQL implements RepositorioDeTratamento {\r\n\r\n    private final ConexaoBD conexaoBD;\r\n\r\n    public RepositorioDeTratamentoSQL() {\r\n        this.conexaoBD = new ConexãoMySQL();\r\n    }\r\n\r\n    @Override\r\n    public void salvar(Tratamento tratamento) {\r\n\r\n        String sql = \"INSERT INTO tratamento (antibiotico, id_consulta, descricao_tratamento) VALUES (?, ?, ?)\";\r\n\r\n\r\n        Connection conexao = null;\r\n        PreparedStatement stmt = null;\r\n\r\n        try {\r\n    \r\n            conexao = conexaoBD.obterConexao();\r\n\r\n     \r\n            stmt = conexao.prepareStatement(sql);\r\n\r\n            stmt.setBoolean(1, tratamento.isAntibiotico());        \r\n            stmt.setInt(2, tratamento.getConsulta().getid());     \r\n            stmt.setString(3, tratamento.getDescricao());         \r\n\r\n            stmt.executeUpdate();\r\n\r\n            System.out.println(\"Tratamento salvo com sucesso!\");\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao salvar tratamento: \" + e.getMessage());\r\n        \r\n        } finally {\r\n         \r\n            try {\r\n                if (stmt != null) stmt.close();\r\n                if (conexao != null) conexaoBD.fecharConexao(conexao);\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Erro ao fechar conexão: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Tratamento BuscarTratamento(int id) {\r\n        return null; \r\n    }\r\n\r\n    @Override\r\n    public List<Tratamento> BuscarPorConsulta(int idConsulta) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    \r\n    public Tratamento BuscarTratamento(int id) {\r\n    \r\n        String sql = \"SELECT * FROM tratamento WHERE id = ?\";\r\n        Connection conexao = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet resultado = null; \r\n\r\n        try {\r\n\r\n            conexao = conexaoBD.obterConexao();\r\n\r\n            stmt = conexao.prepareStatement(sql);\r\n\r\n            stmt.setInt(1, id);\r\n\r\n\r\n            resultado = stmt.executeQuery();\r\n\r\n\r\n            if (resultado.next()) {\r\n\r\n                int tratamentoId = resultado.getInt(\"id\");\r\n                boolean antibiotico = resultado.getBoolean(\"antibiotico\");\r\n                String descricao = resultado.getString(\"descricao_tratamento\");\r\n                int idConsulta = resultado.getInt(\"id_consulta\");\r\n\r\n\r\n                Consulta consulta = new Consulta(idConsulta, null, null, null);\r\n\r\n\r\n                return new Tratamento(tratamentoId, descricao, antibiotico, consulta);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao buscar tratamento por ID: \" + e.getMessage());\r\n        \r\n        } finally {\r\n\r\n            try {\r\n                if (resultado != null) resultado.close();\r\n                if (stmt != null) stmt.close();\r\n                if (conexao != null) conexaoBD.fecharConexao(conexao);\r\n            } catch (SQLException e) {\r\n                System.err.println(\"Erro ao fechar conexão: \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n    \r\n    @Override\r\n    public List<Tratamento> BuscarPorConsulta(int idConsulta) {\r\n      \r\n        String sql = \"SELECT * FROM tratamento WHERE id_consulta = ?\";\r\n        Connection conexao = null;\r\n        PreparedStatement stmt = null;\r\n        ResultSet resultado = null;\r\n      \r\n        List<Tratamento> tratamentos = new ArrayList<>();\r\n\r\n        try {\r\n            \r\n            conexao = conexaoBD.obterConexao();\r\n            stmt = conexao.prepareStatement(sql);\r\n            stmt.setInt(1, idConsulta);\r\n\r\n            \r\n            resultado = stmt.executeQuery();\r\n\r\n           \r\n            while (resultado.next()) {\r\n           \r\n                int tratamentoId = resultado.getInt(\"id\");\r\n                boolean antibiotico = resultado.getBoolean(\"antibiotico\");\r\n                String descricao = resultado.getString(\"descricao_tratamento\");\r\n\r\n       \r\n                Consulta consulta = new Consulta(idConsulta, null, null, null);\r\n\r\n              \r\n                Tratamento tratamento = new Tratamento(tratamentoId, descricao, antibiotico, consulta);\r\n\r\n  \r\n                tratamentos.add(tratamento);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao buscar tratamentos por consulta: \" + e.getMessage());\r\n\r\n        } finally {\r\n        \r\n            try {\r\n                if (resultado != null) resultado.close();\r\n                if (stmt != null) stmt.close();\r\n                if (conexao != null) conexaoBD.\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeTratamentoSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeTratamentoSQL.java
--- a/src/main/java/org/example/ucb/dao/RepositorioDeTratamentoSQL.java	(revision 49fc59ebc73d9f07b08811705eb77afc0f32002a)
+++ b/src/main/java/org/example/ucb/dao/RepositorioDeTratamentoSQL.java	(date 1760646925260)
@@ -1,4 +1,5 @@
 package org.example.ucb.dao;
+import org.example.ucb.model.Consulta;
 
 import org.example.ucb.control.RepositorioDeTratamento;
 import org.example.ucb.model.Tratamento;
@@ -14,7 +15,7 @@
     private final ConexaoBD conexaoBD;
 
     public RepositorioDeTratamentoSQL() {
-        this.conexaoBD = new ConexãoMySQL();
+        this.conexaoBD = new ConexaoMySQL();
     }
 
     @Override
@@ -55,16 +56,6 @@
         }
     }
 
-    @Override
-    public Tratamento BuscarTratamento(int id) {
-        return null; 
-    }
-
-    @Override
-    public List<Tratamento> BuscarPorConsulta(int idConsulta) {
-        return null;
-    }
-
     @Override
     
     public Tratamento BuscarTratamento(int id) {
@@ -157,9 +148,122 @@
             System.err.println("Erro ao buscar tratamentos por consulta: " + e.getMessage());
 
         } finally {
-        
+            try {
+                if (resultado != null) resultado.close();
+                if (stmt != null) stmt.close();
+                if (conexao != null) conexaoBD.fecharConexao(conexao); 
+            } catch (SQLException e) { 
+                System.err.println("Erro ao fechar conexão: " + e.getMessage()); 
+            }
+        }
+        return tratamentos; 
+    } 
+    
+    @Override
+    public List<Tratamento> ListarTratamento() {
+        String sql = "SELECT * FROM tratamento";
+        Connection conexao = null;
+        PreparedStatement stmt = null;
+        ResultSet resultado = null;
+        List<Tratamento> tratamentos = new ArrayList<>();
+
+        try {
+            conexao = conexaoBD.obterConexao();
+            stmt = conexao.prepareStatement(sql);
+            resultado = stmt.executeQuery();
+
+            while (resultado.next()) {
+                int tratamentoId = resultado.getInt("id");
+                boolean antibiotico = resultado.getBoolean("antibiotico");
+                String descricao = resultado.getString("descricao_tratamento");
+                int idConsulta = resultado.getInt("id_consulta");
+
+                Consulta consulta = new Consulta(idConsulta, null, null, null);
+                Tratamento tratamento = new Tratamento(tratamentoId, descricao, antibiotico, consulta);
+                tratamentos.add(tratamento);
+            }
+
+        } catch (Exception e) {
+            System.err.println("Erro ao listar tratamentos: " + e.getMessage());
+        
+        } finally {
             try {
                 if (resultado != null) resultado.close();
                 if (stmt != null) stmt.close();
-                if (conexao != null) conexaoBD.
-}
+                if (conexao != null) conexaoBD.fecharConexao(conexao);
+            } catch (SQLException e) {
+                System.err.println("Erro ao fechar conexão: " + e.getMessage());
+            }
+        }
+        return tratamentos;
+    }
+
+    @Override
+    public void atualizarTratamento(Tratamento tratamento) {
+        String sql = "UPDATE tratamento SET antibiotico = ?, id_consulta = ?, descricao_tratamento = ? WHERE id = ?";
+        Connection conexao = null;
+        PreparedStatement stmt = null;
+
+        try {
+            conexao = conexaoBD.obterConexao();
+            stmt = conexao.prepareStatement(sql);
+
+            stmt.setBoolean(1, tratamento.isAntibiotico());
+            stmt.setInt(2, tratamento.getConsulta().getid());
+            stmt.setString(3, tratamento.getDescricao());
+            stmt.setInt(4, tratamento.getId()); 
+
+            int linhasAfetadas = stmt.executeUpdate();
+
+            if (linhasAfetadas > 0) {
+                System.out.println("Tratamento atualizado com sucesso!");
+            } else {
+                System.err.println("Nenhum tratamento encontrado com o ID " + tratamento.getId() + " para atualizar.");
+            }
+
+        } catch (Exception e) {
+            System.err.println("Erro ao atualizar tratamento: " + e.getMessage());
+        
+        } finally {
+            try {
+                if (stmt != null) stmt.close();
+                if (conexao != null) conexaoBD.fecharConexao(conexao);
+            } catch (SQLException e) {
+                System.err.println("Erro ao fechar conexão: " + e.getMessage());
+            }
+        }
+    }
+    @Override
+    public boolean deletarTratamento(int id) {
+        String sql = "DELETE FROM tratamento WHERE id = ?";
+        Connection conexao = null;
+        PreparedStatement stmt = null;
+
+        try {
+            conexao = conexaoBD.obterConexao();
+            stmt = conexao.prepareStatement(sql);
+            stmt.setInt(1, id);
+
+            int linhasAfetadas = stmt.executeUpdate();
+            
+            if (linhasAfetadas > 0) {
+                System.out.println("Tratamento ID " + id + " deletado com sucesso.");
+            } else {
+                System.err.println("Nenhum tratamento encontrado com o ID " + id + " para deletar.");
+            }
+            
+            return linhasAfetadas > 0;
+
+        } catch (Exception e) {
+            System.err.println("Erro ao deletar tratamento: " + e.getMessage());
+            return false;
+        
+        } finally {
+            try {
+                if (stmt != null) stmt.close();
+                if (conexao != null) conexaoBD.fecharConexao(conexao);
+            } catch (SQLException e) {
+                System.err.println("Erro ao fechar conexão: " + e.getMessage());
+            }
+        }
+    }
Index: src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeDono;\r\nimport org.example.ucb.model.Dono;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\nimport java.util.Date;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RepositorioDeDonoSQL implements RepositorioDeDono {\r\n\r\n    private static final List<Dono> DadosDosDonos = new ArrayList<>();\r\n\r\n    @Override\r\n    public void salvar(Dono dono) {\r\n        String sql = \"INSERT INTO veterinario (CPF, nome, endereco, dataNascimento) VALUES (?, ?, ?, ?)\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n            stmt.setString(1, dono.getCPF());\r\n            stmt.setString(2, dono.getNome());\r\n            stmt.setString(3, dono.getEndereco());\r\n            stmt.setDate(4, new java.sql.Date(dono.getDataNascimento().getTime()));\r\n            stmt.executeUpdate();\r\n            System.out.println(\"Dono salvo no banco de dados com sucesso!\");\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao salvar dono no banco de dados.\");\r\n            e.printStackTrace(); // Imprime o erro detalhado no console\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public Dono BuscarPorCPF(String Cpf) {\r\n        String sql = \"SELECT * FROM veterinario WHERE CPF = ?\";\r\n        Dono donoEncontrado = null;\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, Cpf);\r\n\r\n            try (ResultSet rs = stmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    String cpf = rs.getString(\"CPF\");\r\n                    String nome = rs.getString(\"nome\");\r\n                    String endereco = rs.getString(\"endereco\");\r\n                    Date dataNascimento = rs.getDate(\"dataNascimento\");\r\n\r\n                    donoEncontrado = new Dono(cpf, dataNascimento, endereco, nome);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return donoEncontrado;\r\n    }\r\n\r\n    @Override\r\n    public List<Dono> ListarDono() {\r\n        String sql = \"SELECT * FROM dono\";\r\n        List<Dono> donos = new ArrayList<>();\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n                String cpf = rs.getString(\"CPF\");\r\n                String nome = rs.getString(\"nome\");\r\n                String endereco = rs.getString(\"endereco\");\r\n                java.util.Date dataNascimento = rs.getDate(\"dataNascimento\");\r\n\r\n                donos.add(new Dono(cpf, dataNascimento, endereco, nome));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao listar donos.\");\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return donos;\r\n    }\r\n\r\n    @Override\r\n    public List<Dono> BuscarPorAnimal(int id) {\r\n        return List.of();\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(@org.jetbrains.annotations.NotNull Dono dono) {\r\n        String sql = \"UPDATE dono SET nome = ?, endereco = ?, dataNascimento = ? WHERE CPF = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao()) {\r\n            PreparedStatement stmt = conn.prepareStatement(sql);\r\n            {\r\n\r\n                stmt.setString(1, dono.getNome());\r\n                stmt.setString(2, dono.getEndereco());\r\n                stmt.setDate(3, new java.sql.Date(dono.getDataNascimento().getTime()));\r\n                stmt.setString(4, dono.getCPF());\r\n\r\n                int linhasAfetadas = stmt.executeUpdate();\r\n                if (linhasAfetadas > 0) {\r\n                    System.out.println(\"Dono atualizado com sucesso!\");\r\n                } else {\r\n                    System.out.println(\"Nenhum dono encontrado com esse CPF!\");\r\n                }\r\n\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean deletarDono(String Cpf) {\r\n        String sql = \"DELETE FROM dono WHERE CPF = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, Cpf);\r\n            int linhasAfetadas = stmt.executeUpdate();\r\n            return linhasAfetadas > 0;\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao deletar dono.\");\r\n            e.printStackTrace();\r\n            return false;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java
--- a/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java	(revision 49fc59ebc73d9f07b08811705eb77afc0f32002a)
+++ b/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java	(date 1760646925260)
@@ -3,63 +3,53 @@
 import org.example.ucb.control.RepositorioDeDono;
 import org.example.ucb.model.Dono;
 
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.Statement;
-import java.util.Date;
+import java.sql.*;
 import java.util.ArrayList;
 import java.util.List;
 
 public class RepositorioDeDonoSQL implements RepositorioDeDono {
-
-    private static final List<Dono> DadosDosDonos = new ArrayList<>();
-
     @Override
     public void salvar(Dono dono) {
-        String sql = "INSERT INTO veterinario (CPF, nome, endereco, dataNascimento) VALUES (?, ?, ?, ?)";
+        String sql = "INSERT INTO dono (CPF, nome, endereco, dataNascimento) VALUES (?, ?, ?, ?)";
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
+
             stmt.setString(1, dono.getCPF());
             stmt.setString(2, dono.getNome());
             stmt.setString(3, dono.getEndereco());
             stmt.setDate(4, new java.sql.Date(dono.getDataNascimento().getTime()));
+
             stmt.executeUpdate();
             System.out.println("Dono salvo no banco de dados com sucesso!");
 
         } catch (Exception e) {
             System.err.println("Erro ao salvar dono no banco de dados.");
-            e.printStackTrace(); // Imprime o erro detalhado no console
         }
     }
-
 
     @Override
-    public Dono BuscarPorCPF(String Cpf) {
-        String sql = "SELECT * FROM veterinario WHERE CPF = ?";
+    public Dono BuscarPorCPF(String cpf) {
+        String sql = "SELECT * FROM dono WHERE CPF = ?";
         Dono donoEncontrado = null;
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-            stmt.setString(1, Cpf);
+            stmt.setString(1, cpf);
 
             try (ResultSet rs = stmt.executeQuery()) {
                 if (rs.next()) {
-                    String cpf = rs.getString("CPF");
+                    // Monta o objeto 'Dono' com os dados que vieram do banco
                     String nome = rs.getString("nome");
                     String endereco = rs.getString("endereco");
-                    Date dataNascimento = rs.getDate("dataNascimento");
+                    java.util.Date dataNascimento = rs.getDate("dataNascimento");
 
                     donoEncontrado = new Dono(cpf, dataNascimento, endereco, nome);
                 }
             }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            System.err.println("Erro ao buscar dono por CPF.");
         }
         return donoEncontrado;
     }
@@ -81,66 +71,54 @@
 
                 donos.add(new Dono(cpf, dataNascimento, endereco, nome));
             }
-        } catch (SQLException e) {
-            System.err.println("Erro ao listar donos.");
-            e.printStackTrace();
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            System.err.println("Erro ao listar donos.");
         }
         return donos;
     }
 
     @Override
-    public List<Dono> BuscarPorAnimal(int id) {
-        return List.of();
-    }
-
-    @Override
-    public void atualizar(@org.jetbrains.annotations.NotNull Dono dono) {
+    public void atualizar(Dono dono) {
         String sql = "UPDATE dono SET nome = ?, endereco = ?, dataNascimento = ? WHERE CPF = ?";
 
-        try (Connection conn = new ConexaoMySQL().obterConexao()) {
-            PreparedStatement stmt = conn.prepareStatement(sql);
-            {
+        try (Connection conn = new ConexaoMySQL().obterConexao();
+             PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-                stmt.setString(1, dono.getNome());
-                stmt.setString(2, dono.getEndereco());
-                stmt.setDate(3, new java.sql.Date(dono.getDataNascimento().getTime()));
-                stmt.setString(4, dono.getCPF());
+            stmt.setString(1, dono.getNome());
+            stmt.setString(2, dono.getEndereco());
+            stmt.setDate(3, new java.sql.Date(dono.getDataNascimento().getTime()));
+            stmt.setString(4, dono.getCPF());
 
-                int linhasAfetadas = stmt.executeUpdate();
-                if (linhasAfetadas > 0) {
-                    System.out.println("Dono atualizado com sucesso!");
-                } else {
-                    System.out.println("Nenhum dono encontrado com esse CPF!");
-                }
-
+            int linhasAfetadas = stmt.executeUpdate();
+            if (linhasAfetadas > 0) {
+                System.out.println("Dono atualizado com sucesso!");
+            } else {
+                System.err.println("Nenhum dono encontrado com o CPF informado para atualizar.");
             }
-
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            System.err.println("Erro ao atualizar dono.");
         }
     }
 
     @Override
-    public boolean deletarDono(String Cpf) {
+    public boolean deletarDono(String cpf) {
         String sql = "DELETE FROM dono WHERE CPF = ?";
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-            stmt.setString(1, Cpf);
+            stmt.setString(1, cpf);
             int linhasAfetadas = stmt.executeUpdate();
             return linhasAfetadas > 0;
-
-        } catch (SQLException e) {
+        } catch (Exception e) {
             System.err.println("Erro ao deletar dono.");
-            e.printStackTrace();
             return false;
-        } catch (Exception e) {
-            throw new RuntimeException(e);
         }
     }
+
+    @Override
+    public List<Dono> BuscarPorAnimal(int id) {
+        System.out.println("Método BuscarPorAnimal ainda não foi implementado.");
+        return new ArrayList<>(); // Retornando uma lista vazia por enquanto.
+    }
 }
\ No newline at end of file
Index: src/main/java/org/example/ucb/cli/SistemaClinicaVet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.cli;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.List;\r\nimport org.example.ucb.control.RepositorioDeTratamento; //partedovitor\r\nimport org.example.ucb.dao.RepositorioDeTratamentoSQL; //partedovitor\r\nimport org.example.ucb.control.RepositorioDeEspecialidade; //partedovitor2\r\nimport org.example.ucb.dao.RepositorioDeEspecialidadeSQL; //partedovitor2\r\nimport org.example.ucb.model.Especialidade;\r\nimport org.example.ucb.model.Consulta;\r\nimport org.example.ucb.model.Tratamento;\r\n\r\n\r\npublic class SistemaClinicaVet {\r\n    private static final Scanner entrada = new Scanner(System.in);\r\n    private static RepositorioDeTratamento repositorioDeTratamento; //partedovitor\r\n    private static RepositorioDeEspecialidade repositorioDeEspecialidade;  //partedovitor2\r\n    public static void main(String[] args) {\r\n\r\n        try{\r\n            configurarDependencias();\r\n            exibirMenuPrincipal();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao iniciar o sistema: \" + e.getMessage());\r\n        } finally {\r\n            entrada.close();\r\n        }\r\n        private static void configurarDependencias(){\r\n        repositorioDeTratamento = new RepositorioDeTratamentoSQL(); //partedovitor\r\n        repositorioDeEspecialidade = new RepositorioDeEspecialidadeSQL(); //partedovitor2\r\n        }\r\n\r\n        // PARTE DO VÍTOR - TRATAMENTOS;\r\n        private static void exibirMenuTratamentos() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Gerenciamento de Tratamentos ---\");\r\n            System.out.println(\"1. Adicionar novo tratamento a uma consulta\");\r\n            System.out.println(\"2. Buscar tratamento por ID\");\r\n            System.out.println(\"3. Listar tratamentos de uma consulta\");\r\n            System.out.println(\"0. Voltar ao menu principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine(); // Limpa o buffer do scanner\r\n\r\n            switch (opcao) {\r\n                case 1:\r\n                     System.out.println(\"\\n--- Adicionar Novo Tratamento ---\");\r\n\r\n                    System.out.print(\"Digite o ID da consulta à qual este tratamento pertence: \");\r\n                    int idConsulta = entrada.nextInt();\r\n                    entrada.nextLine();\r\n\r\n                    System.out.print(\"Digite a descrição do tratamento: \");\r\n                    String descricao = entrada.nextLine();\r\n\r\n                    System.out.print(\"O tratamento utiliza antibiótico? (s/n): \");\r\n                    String usaAntibioticoInput = entrada.nextLine();\r\n                    boolean usaAntibiotico = usaAntibioticoInput.equalsIgnoreCase(\"s\");\r\n\r\n                    Consulta consulta = new Consulta(idConsulta, null, null, null);\r\n\r\n\r\n                    Tratamento novoTratamento = new Tratamento(0, descricao, usaAntibiotico, consulta);\r\n\r\n                    repositorioDeTratamento.salvar(novoTratamento);\r\n\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"\\n--- Buscar Tratamento por ID ---\");\r\n                    System.out.print(\"Digite o ID do tratamento que deseja buscar: \");\r\n                    int idParaBuscar = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa o buffer\r\n.\r\n                    Tratamento tratamentoEncontrado = repositorioDeTratamento.BuscarTratamento(idParaBuscar);\r\n\r\n                    if (tratamentoEncontrado != null) {\r\n\r\n                        System.out.println(\"\\n--- Tratamento Encontrado ---\");\r\n                        System.out.println(\"ID do Tratamento: \" + tratamentoEncontrado.getId());\r\n                        System.out.println(\"ID da Consulta Associada: \" + tratamentoEncontrado.getConsulta().getid());\r\n                        System.out.println(\"Descrição: \" + tratamentoEncontrado.getDescricao());\r\n                        System.out.println(\"Usa Antibiótico: \" + (tratamentoEncontrado.isAntibiotico() ? \"Sim\" : \"Não\"));\r\n                        System.out.println(\"-----------------------------\");\r\n                    } else {\r\n\r\n                        System.out.println(\"\\nTratamento com o ID \" + idParaBuscar + \" não encontrado.\");\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"\\n--- Listar Tratamentos por Consulta ---\");\r\n                    System.out.print(\"Digite o ID da consulta para ver os tratamentos associados: \");\r\n                    int idConsultaParaListar = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa o buffer\r\n\r\n                    List<Tratamento> tratamentosDaConsulta = repositorioDeTratamento.BuscarPorConsulta(idConsultaParaListar);\r\n\r\n                    if (tratamentosDaConsulta != null && !tratamentosDaConsulta.isEmpty()) {\r\n                        System.out.println(\"\\n--- Tratamentos Encontrados para a Consulta ID: \" + idConsultaParaListar + \" ---\");\r\n\r\n                        for (Tratamento tratamento : tratamentosDaConsulta) {\r\n                            System.out.println(\"-----------------------------\");\r\n                            System.out.println(\"ID do Tratamento: \" + tratamento.getId());\r\n                            System.out.println(\"Descrição: \" + tratamento.getDescricao());\r\n                            System.out.println(\"Usa Antibiótico: \" + (tratamento.isAntibiotico() ? \"Sim\" : \"Não\"));\r\n                        }\r\n                        System.out.println(\"-----------------------------\");\r\n                    } else {\r\n\r\n                        System.out.println(\"\\nNenhum tratamento encontrado para a consulta com o ID \" + idConsultaParaListar + \".\");\r\n                    }\r\n\r\n                    break;\r\n                case 0:\r\n                    sair = true;\r\n                    System.out.println(\"Voltando ao menu principal...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Opção inválida! Tente novamente.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n        // PARTE DO VÍTOR - ESPECIALIDADES;\r\n        private static void exibirMenuEspecialidades() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Gerenciamento de Especialidades ---\");\r\n            System.out.println(\"1. Cadastrar nova especialidade\");\r\n            System.out.println(\"2. Buscar especialidade por ID\");\r\n            System.out.println(\"3. Listar todas as especialidades\");\r\n            System.out.println(\"4. Listar especialidades de um veterinário\");\r\n            System.out.println(\"0. Voltar ao menu principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine(); // Limpa o buffer\r\n                switch (opcao) {\r\n                case 1:\r\n            \r\n                    System.out.println(\"\\n--- Cadastrar Nova Especialidade ---\");\r\n                    System.out.print(\"Digite o nome da nova especialidade: \");\r\n                    String nomeEspecialidade = entrada.nextLine();\r\n\r\n                    Especialidade novaEspecialidade = new Especialidade(0, nomeEspecialidade);\r\n\r\n                    repositorioDeEspecialidade.salvar(novaEspecialidade);\r\n\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"\\n--- Buscar Especialidade por ID ---\");\r\n                    System.out.print(\"Digite o ID da especialidade que deseja buscar: \");\r\n                    int idParaBuscar = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa o buffer\r\n\r\n                    Especialidade especialidadeEncontrada = repositorioDeEspecialidade.BuscarEspecialidade(idParaBuscar);\r\n\r\n                    if (especialidadeEncontrada != null) {\r\n\r\n                        System.out.println(\"\\n--- Especialidade Encontrada ---\");\r\n                        System.out.println(\"ID: \" + especialidadeEncontrada.getId());\r\n                        System.out.println(\"Nome: \" + especialidadeEncontrada.getNome());\r\n                        System.out.println(\"--------------------------------\");\r\n                    } else {\r\n\r\n                        System.out.println(\"\\nEspecialidade com o ID \" + idParaBuscar + \" não encontrada.\");\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"\\n--- Lista de Todas as Especialidades ---\");\r\n                    List<Especialidade> todasAsEspecialidades = repositorioDeEspecialidade.ListarEspecialidade();\r\n\r\n                    if (todasAsEspecialidades != null && !todasAsEspecialidades.isEmpty()) {\r\n                        for (Especialidade especialidade : todasAsEspecialidades) {\r\n                            System.out.println(\"ID: \" + especialidade.getId() + \" | Nome: \" + especialidade.getNome());\r\n                        }\r\n                        System.out.println(\"--------------------------------------\");\r\n                    } else {\r\n                        System.out.println(\"\\nNenhuma especialidade cadastrada no sistema.\");\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"\\n--- Listar Especialidades por Veterinário ---\");\r\n                    System.out.print(\"Digite o CRMV do veterinário (ex: CRMV-DF 12345): \");\r\n                    String crmvParaBuscar = entrada.nextLine();\r\n                    List<Especialidade> especialidadesDoVet = repositorioDeEspecialidade.BuscarEspPorVet(crmvParaBuscar);\r\n\r\n                    if (especialidadesDoVet != null && !especialidadesDoVet.isEmpty()) {\r\n                        System.out.println(\"\\n--- Especialidades Encontradas para o CRMV: \" + crmvParaBuscar + \" ---\");\r\n                        for (Especialidade especialidade : especialidadesDoVet) {\r\n                            System.out.println(\"ID: \" + especialidade.getId() + \" | Nome: \" + especialidade.getNome());\r\n                        }\r\n                        System.out.println(\"----------------------------------------------------\");\r\n                    } else {\r\n                        System.out.println(\"\\nNenhuma especialidade encontrada para o veterinário com o CRMV \" + crmvParaBuscar + \".\");\r\n                    }\r\n                    break;\r\n                case 0:\r\n                    sair = true;\r\n                    System.out.println(\"Voltando ao menu principal...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Opção inválida! Tente novamente.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java b/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java
--- a/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java	(revision 49fc59ebc73d9f07b08811705eb77afc0f32002a)
+++ b/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java	(date 1760646937262)
@@ -6,10 +6,6 @@
 import org.example.ucb.dao.RepositorioDeTratamentoSQL; //partedovitor
 import org.example.ucb.control.RepositorioDeEspecialidade; //partedovitor2
 import org.example.ucb.dao.RepositorioDeEspecialidadeSQL; //partedovitor2
-import org.example.ucb.model.Especialidade;
-import org.example.ucb.model.Consulta;
-import org.example.ucb.model.Tratamento;
-
 
 public class SistemaClinicaVet {
     private static final Scanner entrada = new Scanner(System.in);
@@ -32,97 +28,160 @@
 
         // PARTE DO VÍTOR - TRATAMENTOS;
         private static void exibirMenuTratamentos() {
-        boolean sair = false;
-        while (!sair) {
-            System.out.println("\n--- Menu de Gerenciamento de Tratamentos ---");
-            System.out.println("1. Adicionar novo tratamento a uma consulta");
-            System.out.println("2. Buscar tratamento por ID");
-            System.out.println("3. Listar tratamentos de uma consulta");
-            System.out.println("0. Voltar ao menu principal");
-            System.out.print("Escolha uma opção: ");
+            boolean sair = false;
+            while (!sair) {
+                System.out.println("\n--- Menu de Gerenciamento de Tratamentos ---");
+                System.out.println("1. Adicionar novo tratamento a uma consulta");
+                System.out.println("2. Buscar tratamento por ID");
+                System.out.println("3. Listar tratamentos de uma consulta");
+                System.out.println("4. Listar TODOS os tratamentos"); 
+                System.out.println("5. Atualizar um tratamento"); 
+                System.out.println("6. Deletar um tratamento"); 
+                System.out.println("0. Voltar ao menu principal");
+                System.out.print("Escolha uma opção: ");
 
-            int opcao = entrada.nextInt();
-            entrada.nextLine(); // Limpa o buffer do scanner
+                int opcao = entrada.nextInt();
+                entrada.nextLine(); 
 
-            switch (opcao) {
-                case 1:
-                     System.out.println("\n--- Adicionar Novo Tratamento ---");
+                switch (opcao) {
+                    case 1: 
+                        System.out.println("\n--- Adicionar Novo Tratamento ---");
 
-                    System.out.print("Digite o ID da consulta à qual este tratamento pertence: ");
-                    int idConsulta = entrada.nextInt();
-                    entrada.nextLine();
+                        System.out.print("Digite o ID da consulta à qual este tratamento pertence: ");
+                        int idConsulta = entrada.nextInt();
+                        entrada.nextLine(); 
 
-                    System.out.print("Digite a descrição do tratamento: ");
-                    String descricao = entrada.nextLine();
+                        System.out.print("Digite a descrição do tratamento: ");
+                        String descricao = entrada.nextLine();
 
-                    System.out.print("O tratamento utiliza antibiótico? (s/n): ");
-                    String usaAntibioticoInput = entrada.nextLine();
-                    boolean usaAntibiotico = usaAntibioticoInput.equalsIgnoreCase("s");
+                        System.out.print("O tratamento utiliza antibiótico? (s/n): ");
+                        String usaAntibioticoInput = entrada.nextLine();
+                        boolean usaAntibiotico = usaAntibioticoInput.equalsIgnoreCase("s");
 
-                    Consulta consulta = new Consulta(idConsulta, null, null, null);
-
-
-                    Tratamento novoTratamento = new Tratamento(0, descricao, usaAntibiotico, consulta);
+                        Consulta consulta = new Consulta(idConsulta, null, null, null); 
+                        Tratamento novoTratamento = new Tratamento(0, descricao, usaAntibiotico, consulta); 
 
-                    repositorioDeTratamento.salvar(novoTratamento);
+                        repositorioDeTratamento.salvar(novoTratamento);
 
-                    break;
-                case 2:
-                    System.out.println("\n--- Buscar Tratamento por ID ---");
-                    System.out.print("Digite o ID do tratamento que deseja buscar: ");
-                    int idParaBuscar = entrada.nextInt();
-                    entrada.nextLine(); // Limpa o buffer
-.
-                    Tratamento tratamentoEncontrado = repositorioDeTratamento.BuscarTratamento(idParaBuscar);
+                        break;
+                    case 2: 
+                        System.out.println("\n--- Buscar Tratamento por ID ---");
+                        System.out.print("Digite o ID do tratamento que deseja buscar: ");
+                        int idParaBuscar = entrada.nextInt();
+                        entrada.nextLine(); 
+
+                        Tratamento tratamentoEncontrado = repositorioDeTratamento.BuscarTratamento(idParaBuscar);
 
-                    if (tratamentoEncontrado != null) {
-
-                        System.out.println("\n--- Tratamento Encontrado ---");
-                        System.out.println("ID do Tratamento: " + tratamentoEncontrado.getId());
-                        System.out.println("ID da Consulta Associada: " + tratamentoEncontrado.getConsulta().getid());
-                        System.out.println("Descrição: " + tratamentoEncontrado.getDescricao());
-                        System.out.println("Usa Antibiótico: " + (tratamentoEncontrado.isAntibiotico() ? "Sim" : "Não"));
-                        System.out.println("-----------------------------");
-                    } else {
-
-                        System.out.println("\nTratamento com o ID " + idParaBuscar + " não encontrado.");
-                    }
-                    break;
-                case 3:
-                    System.out.println("\n--- Listar Tratamentos por Consulta ---");
-                    System.out.print("Digite o ID da consulta para ver os tratamentos associados: ");
-                    int idConsultaParaListar = entrada.nextInt();
-                    entrada.nextLine(); // Limpa o buffer
+                        if (tratamentoEncontrado != null) {
+                            System.out.println("\n--- Tratamento Encontrado ---");
+                            System.out.println("ID do Tratamento: " + tratamentoEncontrado.getId());
+                            System.out.println("ID da Consulta Associada: " + tratamentoEncontrado.getConsulta().getid()); //
+                            System.out.println("Descrição: " + tratamentoEncontrado.getDescricao());
+                            System.out.println("Usa Antibiótico: " + (tratamentoEncontrado.isAntibiotico() ? "Sim" : "Não"));
+                            System.out.println("-----------------------------");
+                        } else {
+                            System.out.println("\nTratamento com o ID " + idParaBuscar + " não encontrado.");
+                        }
+                        break;
+                    case 3: 
+                        System.out.println("\n--- Listar Tratamentos por Consulta ---");
+                        System.out.print("Digite o ID da consulta para ver os tratamentos associados: ");
+                        int idConsultaParaListar = entrada.nextInt();
+                        entrada.nextLine(); 
 
-                    List<Tratamento> tratamentosDaConsulta = repositorioDeTratamento.BuscarPorConsulta(idConsultaParaListar);
+                        List<Tratamento> tratamentosDaConsulta = repositorioDeTratamento.BuscarPorConsulta(idConsultaParaListar);
 
-                    if (tratamentosDaConsulta != null && !tratamentosDaConsulta.isEmpty()) {
-                        System.out.println("\n--- Tratamentos Encontrados para a Consulta ID: " + idConsultaParaListar + " ---");
+                        if (tratamentosDaConsulta != null && !tratamentosDaConsulta.isEmpty()) {
+                            System.out.println("\n--- Tratamentos Encontrados para a Consulta ID: " + idConsultaParaListar + " ---");
 
-                        for (Tratamento tratamento : tratamentosDaConsulta) {
-                            System.out.println("-----------------------------");
-                            System.out.println("ID do Tratamento: " + tratamento.getId());
-                            System.out.println("Descrição: " + tratamento.getDescricao());
-                            System.out.println("Usa Antibiótico: " + (tratamento.isAntibiotico() ? "Sim" : "Não"));
-                        }
-                        System.out.println("-----------------------------");
-                    } else {
-
-                        System.out.println("\nNenhum tratamento encontrado para a consulta com o ID " + idConsultaParaListar + ".");
-                    }
-
-                    break;
-                case 0:
-                    sair = true;
-                    System.out.println("Voltando ao menu principal...");
-                    break;
-                default:
-                    System.out.println("Opção inválida! Tente novamente.");
-                    break;
-            }
-        }
-    }
-
+                            for (Tratamento tratamento : tratamentosDaConsulta) {
+                                System.out.println("-----------------------------");
+                                System.out.println("ID do Tratamento: " + tratamento.getId());
+                                System.out.println("Descrição: " + tratamento.getDescricao());
+                                System.out.println("Usa Antibiótico: " + (tratamento.isAntibiotico() ? "Sim" : "Não"));
+                            }
+                            System.out.println("-----------------------------");
+                        } else {
+                            System.out.println("\nNenhum tratamento encontrado para a consulta com o ID " + idConsultaParaListar + ".");
+                        }
+                        break;
+                    
+                  
+
+                    case 4:
+                        System.out.println("\n--- Listar Todos os Tratamentos ---");
+                        List<Tratamento> todosTratamentos = repositorioDeTratamento.ListarTratamento();
+
+                        if (todosTratamentos != null && !todosTratamentos.isEmpty()) {
+                            System.out.println("\n--- Total de " + todosTratamentos.size() + " Tratamentos Encontrados ---");
+                            for (Tratamento tratamento : todosTratamentos) {
+                                System.out.println("-----------------------------");
+                                System.out.println("ID do Tratamento: " + tratamento.getId());
+                                System.out.println("ID da Consulta: " + tratamento.getConsulta().getid());
+                                System.out.println("Descrição: " + tratamento.getDescricao());
+                                System.out.println("Usa Antibiótico: " + (tratamento.isAntibiotico() ? "Sim" : "Não"));
+                            }
+                            System.out.println("-----------------------------");
+                        } else {
+                            System.out.println("\nNenhum tratamento cadastrado no sistema.");
+                        }
+                        break;
+
+                    case 5: 
+                        System.out.println("\n--- Atualizar Tratamento ---");
+                        System.out.print("Digite o ID do tratamento que deseja ATUALIZAR: ");
+                        int idParaAtualizar = entrada.nextInt();
+                        entrada.nextLine(); 
+
+                      
+                        Tratamento tratamentoParaAtualizar = repositorioDeTratamento.BuscarTratamento(idParaAtualizar);
+
+                        if (tratamentoParaAtualizar == null) {
+                            System.out.println("Tratamento com ID " + idParaAtualizar + " não encontrado.");
+                            break;
+                        }
+
+                       
+                        System.out.print("Digite a NOVA descrição (Atual: " + tratamentoParaAtualizar.getDescricao() + "): ");
+                        String novaDescricao = entrada.nextLine();
+
+                        System.out.print("O tratamento utiliza antibiótico? (s/n) (Atual: " + (tratamentoParaAtualizar.isAntibiotico() ? "s" : "n") + "): ");
+                        String novoUsaAntibioticoInput = entrada.nextLine();
+                        boolean novoUsaAntibiotico = novoUsaAntibioticoInput.equalsIgnoreCase("s");
+
+                        System.out.print("Digite o NOVO ID da consulta (Atual: " + tratamentoParaAtualizar.getConsulta().getid() + "): ");
+                        int novoIdConsulta = entrada.nextInt();
+                        entrada.nextLine(); 
+
+                        
+                        Consulta novaConsulta = new Consulta(novoIdConsulta, null, null, null);
+                        Tratamento tratamentoAtualizado = new Tratamento(idParaAtualizar, novaDescricao, novoUsaAntibiotico, novaConsulta);
+
+                        
+                        repositorioDeTratamento.atualizarTratamento(tratamentoAtualizado);
+                        
+                        break;
+
+                    case 6: 
+                        System.out.println("\n--- Deletar Tratamento ---");
+                        System.out.print("Digite o ID do tratamento que deseja DELETAR: ");
+                        int idParaDeletar = entrada.nextInt();
+                        entrada.nextLine(); 
+
+                    
+                        repositorioDeTratamento.deletarTratamento(idParaDeletar);
+                        break;
+
+                    case 0:
+                        sair = true;
+                        System.out.println("Voltando ao menu principal...");
+                        break;
+                    default:
+                        System.out.println("Opção inválida! Tente novamente.");
+                        break;
+                }
+            }
+        } 
         // PARTE DO VÍTOR - ESPECIALIDADES;
         private static void exibirMenuEspecialidades() {
         boolean sair = false;
@@ -137,6 +196,8 @@
 
             int opcao = entrada.nextInt();
             entrada.nextLine(); // Limpa o buffer
+
+            switch (opcao) {
                 switch (opcao) {
                 case 1:
             
Index: .idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31__Changes_.xml
new file mode 100644
--- /dev/null	(date 1760646925257)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31__Changes_.xml	(date 1760646925257)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]" date="1760560291548" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 15/10/2025 17:31 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1760646925257)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_15_10_2025_17_31_[Changes]/shelved.patch	(date 1760646925257)
@@ -0,0 +1,229 @@
+Index: src/main/java/org/example/ucb/model/Exotico.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.model;\r\n\r\npublic class Exotico extends Animal {\r\n\r\n    private String rfidex;\r\n    private String notaFiscal;\r\n\r\n    public Exotico(int id, String nome,String porte, int idade, String especie, String rfid, Dono dono) {\r\n        super(id, nome, porte, idade, especie, dono);\r\n        this.rfidex = rfid;\r\n        this.notaFiscal = notaFiscal;\r\n    }\r\n\r\n    public String getRfidex() {\r\n        return rfidex;\r\n    }\r\n    public void setRfidex(String rfidex) {\r\n        this.rfidex = rfidex;\r\n    }\r\n    public String getNotaFiscal() {\r\n        return notaFiscal;\r\n    }\r\n    public void setNotaFiscal(String notaFiscal) {\r\n        this.notaFiscal = notaFiscal;\r\n    }\r\n\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/model/Exotico.java b/src/main/java/org/example/ucb/model/Exotico.java
+--- a/src/main/java/org/example/ucb/model/Exotico.java	(revision 8fbefee3854c6736b4abcf9cda4ac35c39ec0e44)
++++ b/src/main/java/org/example/ucb/model/Exotico.java	(date 1760559763729)
+@@ -7,7 +7,7 @@
+ 
+     public Exotico(int id, String nome,String porte, int idade, String especie, String rfid, Dono dono) {
+         super(id, nome, porte, idade, especie, dono);
+-        this.rfidex = rfid;
++        this.rfidex = rfidex;
+         this.notaFiscal = notaFiscal;
+     }
+ 
+Index: src/main/java/org/example/ucb/model/Veterinario.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Date;\r\n\r\npublic class Veterinario {\r\n\r\n    private List<Consulta> historicoConsultas;\r\n\r\n    private String crmv;\r\n    private String nome;\r\n    private int idade;\r\n    private Date dataGraduacao;\r\n    \r\n    public Veterinario(String crmv, String nome, int idade,  Date dataGraduacao) {\r\n        this.crmv = crmv;\r\n        this.nome = nome;\r\n        this.idade = idade;\r\n        this.dataGraduacao = dataGraduacao;\r\n        this.historicoConsultas = new ArrayList<>();\r\n    }\r\n\r\n    public Veterinario(String crmv, String nome, int idade, Date dataGraduacao, Consulta consultaInicial) {\r\n        this.crmv = crmv;\r\n        this.nome = nome;\r\n        this.idade = idade;\r\n        this.dataGraduacao = dataGraduacao;\r\n        this.historicoConsultas = new ArrayList<>();\r\n        this.historicoConsultas.add(consultaInicial);\r\n    }\r\n\r\n    public String getCrmv() {\r\n        return crmv;\r\n    }\r\n    public void setCrmv(String crmv) {\r\n        this.crmv = crmv;\r\n    }\r\n    public String getNome() {\r\n        return nome;\r\n    }\r\n    public void setNome(String nome) {\r\n        this.nome = nome;\r\n    }\r\n    public int getIdade() {\r\n        return idade;\r\n    }\r\n    public void setIdade(int idade) {\r\n        this.idade = idade;\r\n    }\r\n    public Date getDataGraduacao() {\r\n        return dataGraduacao;\r\n    }\r\n    public void setDataGraduacao(Date dataGraduacao) {\r\n        this.dataGraduacao = dataGraduacao;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/model/Veterinario.java b/src/main/java/org/example/ucb/model/Veterinario.java
+--- a/src/main/java/org/example/ucb/model/Veterinario.java	(revision 8fbefee3854c6736b4abcf9cda4ac35c39ec0e44)
++++ b/src/main/java/org/example/ucb/model/Veterinario.java	(date 1760560035054)
+@@ -12,7 +12,7 @@
+     private String nome;
+     private int idade;
+     private Date dataGraduacao;
+-    
++
+     public Veterinario(String crmv, String nome, int idade,  Date dataGraduacao) {
+         this.crmv = crmv;
+         this.nome = nome;
+@@ -22,6 +22,8 @@
+     }
+ 
+     public Veterinario(String crmv, String nome, int idade, Date dataGraduacao, Consulta consultaInicial) {
++
++    public Veterinario(String crmv, String nome, int idade,  Date dataGraduacao) {
+         this.crmv = crmv;
+         this.nome = nome;
+         this.idade = idade;
+@@ -30,6 +32,7 @@
+         this.historicoConsultas.add(consultaInicial);
+     }
+ 
++
+     public String getCrmv() {
+         return crmv;
+     }
+@@ -54,4 +57,10 @@
+     public void setDataGraduacao(Date dataGraduacao) {
+         this.dataGraduacao = dataGraduacao;
+     }
++    public Consulta getConsulta() {
++        return consulta;
++    }
++    public void setConsulta(Consulta consulta) {
++        this.consulta = consulta;
++    }
+ }
+Index: src/main/java/org/example/ucb/model/Certificacao.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.model;\r\n\r\nimport java.util.Date;\r\n\r\npublic class Certificacao {\r\n\r\n    private int NumeroRegistro;\r\n    private Date DataObtencao;\r\n    private String InstituicaoCertificadora;\r\n    private Veterinario veterinario;\r\n\r\n    public Certificacao(int NumeroRegistro, Date DataObtencao,  String InstituicaoCertificadora, Veterinario veterinario) {\r\n        this.NumeroRegistro = NumeroRegistro;\r\n        this.DataObtencao = DataObtencao;\r\n        this.InstituicaoCertificadora = InstituicaoCertificadora;\r\n        this.veterinario = veterinario;\r\n    }\r\n\r\n    public int getNumeroRegistro() {\r\n        return NumeroRegistro;\r\n    }\r\n    public void setNumeroRegistro(int NumeroRegistro) {\r\n        this.NumeroRegistro = NumeroRegistro;\r\n    }\r\n    public Date getDataObtencao() {\r\n        return DataObtencao;\r\n    }\r\n    public void setDataObtencao(Date DataObtencao) {\r\n        this.DataObtencao = DataObtencao;\r\n    }\r\n    public String getInstituicaoCertificadora() {\r\n        return InstituicaoCertificadora;\r\n    }\r\n    public void getInstituicaoCertificadora(String InstituicaoCertificadora) {\r\n        this.InstituicaoCertificadora = InstituicaoCertificadora;\r\n    }\r\n    public Veterinario getVeterinario() {\r\n        return veterinario;\r\n    }\r\n    public void setVeterinario(Veterinario veterinario) {\r\n        this.veterinario = veterinario;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/model/Certificacao.java b/src/main/java/org/example/ucb/model/Certificacao.java
+--- a/src/main/java/org/example/ucb/model/Certificacao.java	(revision 8fbefee3854c6736b4abcf9cda4ac35c39ec0e44)
++++ b/src/main/java/org/example/ucb/model/Certificacao.java	(date 1760559763722)
+@@ -8,12 +8,14 @@
+     private Date DataObtencao;
+     private String InstituicaoCertificadora;
+     private Veterinario veterinario;
++    private Especialidade especialidade;
+ 
+-    public Certificacao(int NumeroRegistro, Date DataObtencao,  String InstituicaoCertificadora, Veterinario veterinario) {
++    public Certificacao(int NumeroRegistro, Date DataObtencao,  String InstituicaoCertificadora, Veterinario veterinario, Especialidade especialidade) {
+         this.NumeroRegistro = NumeroRegistro;
+         this.DataObtencao = DataObtencao;
+         this.InstituicaoCertificadora = InstituicaoCertificadora;
+         this.veterinario = veterinario;
++        this.especialidade = epecialidade;
+     }
+ 
+     public int getNumeroRegistro() {
+@@ -28,7 +30,7 @@
+     public void setDataObtencao(Date DataObtencao) {
+         this.DataObtencao = DataObtencao;
+     }
+-    public String getInstituicaoCertificadora() {
++    public String setInstituicaoCertificadora() {
+         return InstituicaoCertificadora;
+     }
+     public void getInstituicaoCertificadora(String InstituicaoCertificadora) {
+@@ -40,4 +42,10 @@
+     public void setVeterinario(Veterinario veterinario) {
+         this.veterinario = veterinario;
+     }
++    public Especialidade getEspecialidade() {
++        return especialidade;
++    }
++    public void setEspecialidade(Especialidade especialidade) {
++        this.especialidade = especialidade;
++    }
+ }
+Index: src/main/java/org/example/ucb/dao/RepositorioDeTratamento.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeTratamento.java b/src/main/java/org/example/ucb/dao/RepositorioDeTratamento.java
+new file mode 100644
+--- /dev/null	(date 1760559763720)
++++ b/src/main/java/org/example/ucb/dao/RepositorioDeTratamento.java	(date 1760559763720)
+@@ -0,0 +1,36 @@
++package org.example.ucb.dao;
++
++import org.example.ucb.control.RepositorioDeTratamento;
++import org.example.ucb.model.Tratamento;
++import java.util.List;
++import java.sql.Connection;
++import java.sql.PreparedStatement;
++import java.sql.ResultSet;
++import java.sql.SQLException;
++import java.util.ArrayList;
++
++public class RepositorioDeTratamentoSQL implements RepositorioDeTratamento {
++
++    private final ConexaoBD conexaoBD;
++
++    public RepositorioDeTratamentoSQL() {
++        this.conexaoBD = new ConexãoMySQL(); 
++    }
++
++    @Override
++    public void salvar(Tratamento tratamento) {
++    // Implementar a lógica para salvar o tratamento no banco de dados aqui.
++    }
++
++    @Override
++    public Tratamento BuscarTratamento(int id) {
++    // Implementar a lógica para buscar um tratamento pelo seu ID aqui.
++      return null; 
++    }
++
++    @Override
++    public List<Tratamento> BuscarPorConsulta(int idConsulta) {
++    // Implementar a lógica para buscar os tratamentos de uma consulta aqui.
++      return null;
++    }
++}
+Index: src/main/java/org/example/ucb/model/Especialidade.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.model;\r\n\r\npublic class Especialidade {\r\n    private int id;\r\n    private String nome;\r\n    private Certificacao certificacao;\r\n\r\n    public Especialidade(int  id, String nome, Certificacao certificacao) {\r\n        this.id = id;\r\n        this.nome = nome;\r\n        this.certificacao = certificacao;\r\n    }\r\n\r\n    public int  getId() {\r\n        return id;\r\n    }\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n    public String getNome() {\r\n        return nome;\r\n    }\r\n    public void setNome(String nome) {\r\n        this.nome = nome;\r\n    }\r\n    public Certificacao getCertificacao() {\r\n        return certificacao;\r\n    }\r\n    public void setCertificacao(Certificacao certificacao) {\r\n        this.certificacao = certificacao;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/model/Especialidade.java b/src/main/java/org/example/ucb/model/Especialidade.java
+--- a/src/main/java/org/example/ucb/model/Especialidade.java	(revision 8fbefee3854c6736b4abcf9cda4ac35c39ec0e44)
++++ b/src/main/java/org/example/ucb/model/Especialidade.java	(date 1760559763726)
+@@ -3,12 +3,10 @@
+ public class Especialidade {
+     private int id;
+     private String nome;
+-    private Certificacao certificacao;
+ 
+-    public Especialidade(int  id, String nome, Certificacao certificacao) {
++    public Especialidade(int  id, String nome) {
+         this.id = id;
+         this.nome = nome;
+-        this.certificacao = certificacao;
+     }
+ 
+     public int  getId() {
+@@ -23,10 +21,4 @@
+     public void setNome(String nome) {
+         this.nome = nome;
+     }
+-    public Certificacao getCertificacao() {
+-        return certificacao;
+-    }
+-    public void setCertificacao(Certificacao certificacao) {
+-        this.certificacao = certificacao;
+-    }
+ }
+Index: src/main/java/org/example/ucb/model/Tratamento.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.model;\r\n\r\npublic class Tratamento {\r\n\r\n    private int id;\r\n    private String descricao;\r\n    private boolean antibiotico;\r\n    private Consulta consulta;\r\n\r\n    public Tratamento( int id, String descricao, boolean antibiotico, Consulta consulta) {\r\n        this.id = id;\r\n        this.descricao = descricao;\r\n        this.antibiotico = antibiotico;\r\n        this.consulta = consulta;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n    public String getDescricao() {\r\n        return descricao;\r\n    }\r\n    public void setDescricao(String descricao) {\r\n        this.descricao = descricao;\r\n    }\r\n    public boolean isAntibiotico() {\r\n        return antibiotico;\r\n    }\r\n    public void setAntibiotico(boolean antibiotico) {\r\n        this.antibiotico = antibiotico;\r\n    }\r\n    public Consulta getConsulta() {\r\n        return consulta;\r\n    }\r\n    public void setConsulta(Consulta consulta) {\r\n        this.consulta = consulta;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/model/Tratamento.java b/src/main/java/org/example/ucb/model/Tratamento.java
+--- a/src/main/java/org/example/ucb/model/Tratamento.java	(revision 8fbefee3854c6736b4abcf9cda4ac35c39ec0e44)
++++ b/src/main/java/org/example/ucb/model/Tratamento.java	(date 1760559763732)
+@@ -5,13 +5,11 @@
+     private int id;
+     private String descricao;
+     private boolean antibiotico;
+-    private Consulta consulta;
+ 
+-    public Tratamento( int id, String descricao, boolean antibiotico, Consulta consulta) {
++    public Tratamento( int id, String descricao, boolean antibiotico) {
+         this.id = id;
+         this.descricao = descricao;
+         this.antibiotico = antibiotico;
+-        this.consulta = consulta;
+     }
+ 
+     public int getId() {
+@@ -32,10 +30,4 @@
+     public void setAntibiotico(boolean antibiotico) {
+         this.antibiotico = antibiotico;
+     }
+-    public Consulta getConsulta() {
+-        return consulta;
+-    }
+-    public void setConsulta(Consulta consulta) {
+-        this.consulta = consulta;
+-    }
+ }
