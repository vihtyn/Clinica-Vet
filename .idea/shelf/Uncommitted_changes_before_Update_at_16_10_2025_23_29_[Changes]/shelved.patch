Index: src/main/java/org/example/ucb/control/RepositorioDeConsulta.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.control;\r\n\r\nimport org.example.ucb.model.Consulta;\r\nimport java.util.List;\r\n\r\npublic interface RepositorioDeConsulta {\r\n    void salvar(Consulta consulta);\r\n    Consulta BuscarConsulta(int id);\r\n    List<Consulta> ListarConsulta();\r\n    List<Consulta> BuscarPorAnimal(int id);\r\n    void atualizarConsulta(Consulta consulta);\r\n    boolean deletarCertificacao(int id);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java b/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java
--- a/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java	(date 1760668110176)
@@ -9,5 +9,5 @@
     List<Consulta> ListarConsulta();
     List<Consulta> BuscarPorAnimal(int id);
     void atualizarConsulta(Consulta consulta);
-    boolean deletarCertificacao(int id);
+    boolean deletarConsulta(int id);
 }
Index: src/main/java/org/example/ucb/model/Especialidade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.model;\r\n\r\npublic class Especialidade {\r\n    private int id;\r\n    private String nome;\r\n\r\n    public Especialidade() {\r\n\r\n    }\r\n\r\n    public Especialidade(int id, String nome){\r\n        this.id = id;\r\n        this.nome = nome;\r\n    }\r\n\r\n    public int  getId() {\r\n        return id;\r\n    }\r\n    public void setId(int id) {\r\n        this.id = id;\r\n    }\r\n    public String getNome() {\r\n        return nome;\r\n    }\r\n    public void setNome(String nome) {\r\n        this.nome = nome;\r\n    }\r\n    public Certificacao getCertificacao() {\r\n        return certificacao;\r\n    }\r\n    public void setCertificacao(Certificacao certificacao) {\r\n        this.certificacao = certificacao;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/model/Especialidade.java b/src/main/java/org/example/ucb/model/Especialidade.java
--- a/src/main/java/org/example/ucb/model/Especialidade.java	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/src/main/java/org/example/ucb/model/Especialidade.java	(date 1760668110178)
@@ -25,10 +25,4 @@
     public void setNome(String nome) {
         this.nome = nome;
     }
-    public Certificacao getCertificacao() {
-        return certificacao;
-    }
-    public void setCertificacao(Certificacao certificacao) {
-        this.certificacao = certificacao;
-    }
 }
Index: src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeConsulta;\r\nimport org.example.ucb.model.Animal;\r\nimport org.example.ucb.model.Consulta;\r\nimport org.example.ucb.model.Pet;\r\nimport org.example.ucb.model.Veterinario;\r\n\r\nimport java.sql.*;\r\nimport java.sql.PreparedStatement;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\npublic class RepositorioDeConsultaSQL implements RepositorioDeConsulta {\r\n    @Override\r\n    public void salvar(Consulta consulta) {\r\n            String sql = \"INSET INTO consulta (diagnostico, id_animal, CRMV_veterinario) VALUES (?, ?, ?)\";\r\n\r\n            try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n                 PreparedStatement stmt = conexao.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n                stmt.setString(1, consulta.getdiagnostico());\r\n                stmt.setInt(2, consulta.getanimal().getId());\r\n                stmt.setString(3, consulta.getveterinario().getCrmv());\r\n\r\n                int linhasAfetadas = stmt.executeUpdate();\r\n                if(linhasAfetadas > 0) {\r\n                    try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {\r\n                        if(generatedKeys.next()) {\r\n                            consulta.setid(generatedKeys.getInt(1));\r\n                        }\r\n                    }\r\n                }\r\n                System.out.println(\"Consulta salva com sucesso! ID: \" + consulta.getid());\r\n            } catch (Exception e) {\r\n                System.err.println(\"Erro ao salvar consulta: \" + e.getMessage());\r\n            }\r\n    }\r\n\r\n    @Override\r\n    public Consulta BuscarConsulta(int id) {\r\n        String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.CRMV_veterinario = v.CRMV WHERE co.id = ?\";\r\n        Consulta consulta = null;\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, id);\r\n\r\n            try(ResultSet rs= stmt.executeQuery()) {\r\n                if(rs.next()) {\r\n                    consulta = new Consulta();\r\n                    Veterinario veterinario = new Veterinario();\r\n\r\n                    Animal animalDaConsulta = new Pet();\r\n                    animalDaConsulta.setId(rs.getInt(\"id_animal\"));\r\n                    animalDaConsulta.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                    veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                    veterinario.setNome(rs.getString(\"Vet_nome\"));\r\n\r\n                consulta.setid(rs.getInt(\"id\"));\r\n                consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                consulta.setanimal(animalDaConsulta);\r\n                consulta.setveterinario(veterinario);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n        System.err.println(\"Erro ao buscar consulta por ID: \" + e.getMessage());\r\n        }\r\n        return consulta;\r\n    }\r\n\r\n    @Override\r\n    public List<Consulta> ListarConsulta() {\r\n        List<Consulta> consultas = new ArrayList<>();\r\n        String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             Statement stmt = conexao.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n\r\n                Consulta consulta = new Consulta();\r\n                Veterinario veterinario = new Veterinario();\r\n\r\n                Animal animalDaConsulta = new Pet();\r\n\r\n                animalDaConsulta.setId(rs.getInt(\"id_animal\"));\r\n                animalDaConsulta.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                veterinario.setNome(rs.getString(\"Vet_nome\"));\r\n\r\n                consulta.setid(rs.getInt(\"id\"));\r\n                consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                consulta.setanimal(animalDaConsulta);\r\n                consulta.setveterinario(veterinario);\r\n\r\n                consultas.add(consulta);\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao listar as consultas: \" + e.getMessage());\r\n        }\r\n        return consultas;\r\n    }\r\n\r\n    @Override\r\n    public List<Consulta> BuscarPorAnimal(int id) {\r\n        List<Consulta> consultas = new ArrayList<>();\r\n        String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV WHERE co.id_animal = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n            stmt.setInt(1, id);\r\n\r\n            try (ResultSet rs = stmt.executeQuery()) {\r\n\r\n                while (rs.next()) {\r\n\r\n                    Consulta consulta = new Consulta();\r\n                    Veterinario veterinario = new Veterinario();\r\n                    Animal animal = new Pet();\r\n\r\n                    animal.setId(rs.getInt(\"id_animal\"));\r\n                    animal.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                    veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                    veterinario.setNome(rs.getString(\"vet_nome\"));\r\n\r\n                    consulta.setid(rs.getInt(\"id\"));\r\n                    consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                    consulta.setanimal(animal);\r\n                    consulta.setveterinario(veterinario);\r\n\r\n                    consultas.add(consulta);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao buscar consulta por animal: \" + e.getMessage());\r\n        }\r\n        return consultas;\r\n    }\r\n\r\n    @Override\r\n    public void atualizarConsulta(Consulta consulta) {\r\n        String sql = \"UPDATE consulta SET diagnostico = ?, id_animal = ?, CRMV_veterinario = ? WHERE id = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, consulta.getdiagnostico());\r\n            stmt.setInt(2, consulta.getanimal().getId());\r\n            stmt.setString(3, consulta.getveterinario().getCrmv());\r\n            stmt.setInt(4, consulta.getid());\r\n            stmt.executeUpdate();\r\n\r\n            System.out.println(\"Cosulta ID : \" + consulta.getid() + \" atualizada com sucesso!!\");\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Falaha ao atualizar consulta \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean deletarCertificacao(int id) {\r\n        String sql = \"DELETE FROM consulta WHERE id = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n            stmt.setInt(1, id);\r\n\r\n            int linhasAfetadas = stmt.executeUpdate();\r\n            return linhasAfetadas > 0;\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao deletar consulta: \" + e.getMessage());\r\n            return false;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java
--- a/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java	(date 1760668130268)
@@ -13,6 +13,7 @@
 import java.util.concurrent.ExecutionException;
 
 public class RepositorioDeConsultaSQL implements RepositorioDeConsulta {
+
     @Override
     public void salvar(Consulta consulta) {
             String sql = "INSET INTO consulta (diagnostico, id_animal, CRMV_veterinario) VALUES (?, ?, ?)";
@@ -79,7 +80,7 @@
         String sql = "SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV";
 
         try (Connection conexao = new ConexaoMySQL().obterConexao();
-             Statement stmt = conexao.createStatement();
+             PreparedStatement stmt = conexao.createStatement();
              ResultSet rs = stmt.executeQuery(sql)) {
 
             while (rs.next()) {
@@ -111,75 +112,16 @@
 
     @Override
     public List<Consulta> BuscarPorAnimal(int id) {
-        List<Consulta> consultas = new ArrayList<>();
-        String sql = "SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV WHERE co.id_animal = ?";
-
-        try (Connection conexao = new ConexaoMySQL().obterConexao();
-             PreparedStatement stmt = conexao.prepareStatement(sql)) {
-            stmt.setInt(1, id);
-
-            try (ResultSet rs = stmt.executeQuery()) {
-
-                while (rs.next()) {
-
-                    Consulta consulta = new Consulta();
-                    Veterinario veterinario = new Veterinario();
-                    Animal animal = new Pet();
-
-                    animal.setId(rs.getInt("id_animal"));
-                    animal.setNome(rs.getString("animal_nome"));
-
-                    veterinario.setCrmv(rs.getString("CRMV_veterinario"));
-                    veterinario.setNome(rs.getString("vet_nome"));
-
-                    consulta.setid(rs.getInt("id"));
-                    consulta.setdiagnostico(rs.getString("diagnostico"));
-
-                    consulta.setanimal(animal);
-                    consulta.setveterinario(veterinario);
-
-                    consultas.add(consulta);
-                }
-            }
-        } catch (Exception e) {
-            System.err.println("Erro ao buscar consulta por animal: " + e.getMessage());
-        }
-        return consultas;
+        return List.of();
     }
 
     @Override
     public void atualizarConsulta(Consulta consulta) {
-        String sql = "UPDATE consulta SET diagnostico = ?, id_animal = ?, CRMV_veterinario = ? WHERE id = ?";
-
-        try (Connection conexao = new ConexaoMySQL().obterConexao();
-             PreparedStatement stmt = conexao.prepareStatement(sql)) {
 
-            stmt.setString(1, consulta.getdiagnostico());
-            stmt.setInt(2, consulta.getanimal().getId());
-            stmt.setString(3, consulta.getveterinario().getCrmv());
-            stmt.setInt(4, consulta.getid());
-            stmt.executeUpdate();
-
-            System.out.println("Cosulta ID : " + consulta.getid() + " atualizada com sucesso!!");
-
-        } catch (Exception e) {
-            System.err.println("Falaha ao atualizar consulta " + e.getMessage());
-        }
     }
 
     @Override
     public boolean deletarCertificacao(int id) {
-        String sql = "DELETE FROM consulta WHERE id = ?";
-
-        try (Connection conexao = new ConexaoMySQL().obterConexao();
-             PreparedStatement stmt = conexao.prepareStatement(sql)) {
-            stmt.setInt(1, id);
-
-            int linhasAfetadas = stmt.executeUpdate();
-            return linhasAfetadas > 0;
-        } catch (Exception e) {
-            System.err.println("Erro ao deletar consulta: " + e.getMessage());
-            return false;
-        }
+        return false;
     }
 }
Index: src/main/java/org/example/ucb/cli/SistemaClinicaVet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.cli;\r\n\r\nimport org.example.ucb.control.*;\r\nimport org.example.ucb.dao.*;\r\nimport org.example.ucb.model.*;\r\nimport java.time.LocalDate;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class SistemaClinicaVet {\r\n\r\n    private static final Scanner entrada = new Scanner(System.in);\r\n    private static RepositorioDeTratamento repositorioDeTratamento;\r\n    private static RepositorioDeEspecialidade repositorioDeEspecialidade;\r\n    private static RepositorioDeAnimal repositorioDeAnimal;\r\n    private static RepositorioDeDono repositorioDeDono;\r\n    private static RepositorioDeVeterinario repositorioDeVeterinario;\r\n    private static RepositorioDeCertificacao repositorioDeCertificacao;\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            configurarDependencias();\r\n            exibirMenuPrincipal();\r\n        } catch (Exception e) {\r\n            System.err.println(\"ERRO FATAL NO SISTEMA: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        } finally {\r\n            entrada.close();\r\n        }\r\n    }\r\n\r\n    private static void configurarDependencias() {\r\n        repositorioDeTratamento = new RepositorioDeTratamentoSQL();\r\n        repositorioDeEspecialidade = new RepositorioDeEspecialidadeSQL();\r\n        repositorioDeAnimal = new RepositorioDeAnimalSQL();\r\n        repositorioDeDono = new RepositorioDeDonoSQL();\r\n        repositorioDeVeterinario = new RepositorioDeVeterinarioSQL();\r\n        repositorioDeCertificacao = new RepositorioDeCertificacaoSQL()\r\n    }\r\n\r\n    private static void exibirMenuPrincipal() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n======= CLÍNICA VETERINÁRIA - MENU PRINCIPAL =======\");\r\n            System.out.println(\"1. Gerenciar Donos\");\r\n            System.out.println(\"2. Gerenciar Veterinários\");\r\n            System.out.println(\"3. Gerenciar Animais\");\r\n            System.out.println(\"4. Gerenciar Tratamentos\");\r\n            System.out.println(\"0. Sair do Sistema\");\r\n            System.out.print(\"Escolha uma área para gerenciar: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine();\r\n\r\n            switch (opcao) {\r\n                case 1: exibirMenuDono(); break;\r\n                case 2: exibirMenuVeterinario(); break;\r\n                case 3: exibirMenuAnimais(); break;\r\n                case 4: exibirMenuTratamentos(); break;\r\n                case 0: sair = true; System.out.println(\"Obrigado por usar o sistema!\"); break;\r\n                default: System.out.println(\"Opção inválida! Tente novamente.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    //Parte do Victor Caldas - Dono\r\n    private static void exibirMenuDono() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Gerenciamento de Donos ---\");\r\n            System.out.println(\"1. Cadastrar Novo Dono\");\r\n            System.out.println(\"2. Listar Todos os Donos\");\r\n            System.out.println(\"3. Buscar Dono por CPF\");\r\n            System.out.println(\"4. Atualizar Dono\");\r\n            System.out.println(\"5. Deletar Dono\");\r\n            System.out.println(\"0. Voltar ao Menu Principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine();\r\n            switch (opcao) {\r\n                case 1:\r\n                    try {\r\n                        System.out.println(\"\\n--- Cadastrar Novo Dono ---\");\r\n                        System.out.print(\"CPF: \");\r\n                        String cpf = entrada.nextLine();\r\n                        System.out.print(\"Nome: \");\r\n                        String nome = entrada.nextLine();\r\n                        System.out.print(\"Endereço: \");\r\n                        String endereco = entrada.nextLine();\r\n                        System.out.print(\"Data de Nascimento (dd/MM/yyyy): \");\r\n                        String dataTexto = entrada.nextLine();\r\n                        DateTimeFormatter formatador = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\r\n                        LocalDate dataNascimento = LocalDate.parse(dataTexto, formatador);\r\n                        Dono novoDono = new Dono(cpf, dataNascimento, endereco, nome);\r\n                        repositorioDeDono.salvar(novoDono);\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"Erro ao cadastrar dono. Verifique o formato da data.\");\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    List<Dono> donos = repositorioDeDono.ListarDono();\r\n                    if (donos.isEmpty()) {\r\n                        System.out.println(\"Nenhum dono cadastrado.\");\r\n                    } else {\r\n                        System.out.println(\"\\n--- Lista de Donos Cadastrados ---\");\r\n                        for (Dono d : donos) {\r\n                            System.out.println(\"CPF: \" + d.getCPF() + \" | Nome: \" + d.getNome());\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"\\nDigite o CPF para busca: \");\r\n                    String cpfBusca = entrada.nextLine();\r\n                    Dono donoEncontrado = repositorioDeDono.BuscarPorCPF(cpfBusca);\r\n                    if (donoEncontrado != null) {\r\n                        System.out.println(\"--- Dono Encontrado ---\");\r\n                        System.out.println(\"CPF: \" + donoEncontrado.getCPF());\r\n                        System.out.println(\"Nome: \" + donoEncontrado.getNome());\r\n                        System.out.println(\"Endereço: \" + donoEncontrado.getEndereco());\r\n                        DateTimeFormatter f = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\r\n                        System.out.println(\"Data de Nascimento: \" + donoEncontrado.getDataNascimento().format(f));\r\n                    } else {\r\n                        System.out.println(\"Dono com CPF \" + cpfBusca + \" não encontrado.\");\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.print(\"\\nDigite o CPF do dono que deseja atualizar: \");\r\n                    String cpfAtt = entrada.nextLine();\r\n                    Dono donoAtt = repositorioDeDono.BuscarPorCPF(cpfAtt);\r\n                    if (donoAtt == null) {\r\n                        System.out.println(\"Dono não encontrado.\");\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Deixe o campo em branco para não alterar.\");\r\n                    System.out.print(\"Novo Nome (\" + donoAtt.getNome() + \"): \");\r\n                    String nomeAtt = entrada.nextLine();\r\n                    if (!nomeAtt.trim().isEmpty()) donoAtt.setNome(nomeAtt);\r\n                    System.out.print(\"Novo Endereço (\" + donoAtt.getEndereco() + \"): \");\r\n                    String enderecoAtt = entrada.nextLine();\r\n                    if (!enderecoAtt.trim().isEmpty()) donoAtt.setEndereco(enderecoAtt);\r\n                    repositorioDeDono.atualizar(donoAtt);\r\n                    System.out.println(\"Dono atualizado com sucesso!\");\r\n                    break;\r\n                case 5:\r\n                    System.out.print(\"\\nDigite o CPF do dono que deseja deletar: \");\r\n                    String cpfDel = entrada.nextLine();\r\n                    System.out.print(\"Tem certeza que deseja deletar? (S/N): \");\r\n                    if (entrada.nextLine().equalsIgnoreCase(\"S\")) {\r\n                        if (repositorioDeDono.deletarDono(cpfDel)) {\r\n                            System.out.println(\"Dono deletado com sucesso.\");\r\n                        } else {\r\n                            System.err.println(\"Erro: Dono não encontrado.\");\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"Operação cancelada.\");\r\n                    }\r\n                    break;\r\n                case 0: sair = true; break;\r\n                default: System.out.println(\"Opção inválida!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Parte do Victor Caldas - Veterinário\r\n    private static void exibirMenuVeterinario() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Gerenciamento de Veterinários ---\");\r\n            System.out.println(\"1. Cadastrar Novo Veterinário\");\r\n            System.out.println(\"2. Listar Todos os Veterinários\");\r\n            System.out.println(\"3. Buscar Veterinário por CRMV\");\r\n            System.out.println(\"4. Atualizar Veterinário\");\r\n            System.out.println(\"5. Deletar Veterinário\");\r\n            System.out.println(\"0. Voltar ao Menu Principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine();\r\n\r\n            switch (opcao) {\r\n                case 1:\r\n                    try {\r\n                        System.out.println(\"\\n--- Cadastrar Novo Veterinário ---\");\r\n                        System.out.print(\"CRMV: \");\r\n                        String crmv = entrada.nextLine();\r\n                        System.out.print(\"Nome: \");\r\n                        String nome = entrada.nextLine();\r\n                        System.out.print(\"Idade: \");\r\n                        int idade = entrada.nextInt();\r\n                        entrada.nextLine();\r\n                        System.out.print(\"Data de Graduação (dd/MM/yyyy): \");\r\n                        String dataTexto = entrada.nextLine();\r\n                        DateTimeFormatter formatador = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\r\n                        LocalDate dataGraduacao = LocalDate.parse(dataTexto, formatador);\r\n                        Veterinario novoVet = new Veterinario(crmv, nome, idade, dataGraduacao);\r\n                        repositorioDeVeterinario.salvar(novoVet);\r\n                    } catch (Exception e) {\r\n                        System.err.println(\"Erro ao cadastrar veterinário. Verifique os dados e o formato da data.\");\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    List<Veterinario> veterinarios = repositorioDeVeterinario.ListarVet();\r\n                    if (veterinarios.isEmpty()) {\r\n                        System.out.println(\"Nenhum veterinário cadastrado.\");\r\n                    } else {\r\n                        System.out.println(\"\\n--- Lista de Veterinários Cadastrados ---\");\r\n                        for (Veterinario vet : veterinarios) {\r\n                            System.out.println(\"CRMV: \" + vet.getCrmv() + \" | Nome: \" + vet.getNome());\r\n                        }\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.print(\"\\nDigite o CRMV para busca: \");\r\n                    String crmvBusca = entrada.nextLine();\r\n                    Veterinario vetEncontrado = repositorioDeVeterinario.BuscarVet(crmvBusca);\r\n                    if (vetEncontrado != null) {\r\n                        System.out.println(\"--- Veterinário Encontrado ---\");\r\n                        System.out.println(\"CRMV: \" + vetEncontrado.getCrmv());\r\n                        System.out.println(\"Nome: \" + vetEncontrado.getNome());\r\n                        System.out.println(\"Idade: \" + vetEncontrado.getIdade());\r\n                        DateTimeFormatter f = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\r\n                        System.out.println(\"Data de Graduação: \" + vetEncontrado.getDataGraduacao().format(f));\r\n                    } else {\r\n                        System.out.println(\"Veterinário com CRMV \" + crmvBusca + \" não encontrado.\");\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.print(\"\\nDigite o CRMV do veterinário que deseja atualizar: \");\r\n                    String crmvAtt = entrada.nextLine();\r\n                    Veterinario vetAtt = repositorioDeVeterinario.BuscarVet(crmvAtt);\r\n                    if (vetAtt == null) {\r\n                        System.out.println(\"Veterinário não encontrado.\");\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Deixe o campo em branco para não alterar.\");\r\n                    System.out.print(\"Novo Nome (\" + vetAtt.getNome() + \"): \");\r\n                    String nomeAtt = entrada.nextLine();\r\n                    if (!nomeAtt.trim().isEmpty()) vetAtt.setNome(nomeAtt);\r\n                    repositorioDeVeterinario.atualizar(vetAtt);\r\n                    System.out.println(\"Veterinário atualizado com sucesso!\");\r\n                    break;\r\n                case 5:\r\n                    System.out.print(\"\\nDigite o CRMV do veterinário a ser deletado: \");\r\n                    String crmvDel = entrada.nextLine();\r\n                    System.out.print(\"Tem certeza que deseja deletar? (S/N): \");\r\n                    if (entrada.nextLine().equalsIgnoreCase(\"S\")) {\r\n                        if (repositorioDeVeterinario.deletarVet(crmvDel)) {\r\n                            System.out.println(\"Veterinário deletado com sucesso.\");\r\n                        } else {\r\n                            System.err.println(\"Erro: Veterinário não encontrado.\");\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"Operação cancelada.\");\r\n                    }\r\n                    break;\r\n                case 0: sair = true; break;\r\n                default: System.out.println(\"Opção inválida!\");\r\n            }\r\n        }\r\n    }\r\n        // PARTE DO VÍTOR - TRATAMENTOS;\r\n        private static void exibirMenuTratamentos() {\r\n        boolean sair = false;\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Gerenciamento de Tratamentos ---\");\r\n            System.out.println(\"1. Adicionar novo tratamento a uma consulta\");\r\n            System.out.println(\"2. Buscar tratamento por ID\");\r\n            System.out.println(\"3. Listar tratamentos de uma consulta\");\r\n            System.out.println(\"0. Voltar ao menu principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine(); // Limpa o buffer do scanner\r\n\r\n            switch (opcao) {\r\n                case 1:\r\n                     System.out.println(\"\\n--- Adicionar Novo Tratamento ---\");\r\n\r\n                    System.out.print(\"Digite o ID da consulta à qual este tratamento pertence: \");\r\n                    int idConsulta = entrada.nextInt();\r\n                    entrada.nextLine();\r\n\r\n                    System.out.print(\"Digite a descrição do tratamento: \");\r\n                    String descricao = entrada.nextLine();\r\n\r\n                    System.out.print(\"O tratamento utiliza antibiótico? (s/n): \");\r\n                    String usaAntibioticoInput = entrada.nextLine();\r\n                    boolean usaAntibiotico = usaAntibioticoInput.equalsIgnoreCase(\"s\");\r\n\r\n                    Consulta consulta = new Consulta(idConsulta, null, null, null);\r\n\r\n\r\n                    Tratamento novoTratamento = new Tratamento(0, descricao, usaAntibiotico, consulta);\r\n\r\n                    repositorioDeTratamento.salvar(novoTratamento);\r\n\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"\\n--- Buscar Tratamento por ID ---\");\r\n                    System.out.print(\"Digite o ID do tratamento que deseja buscar: \");\r\n                    int idParaBuscar = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa o buffer\r\n                    Tratamento tratamentoEncontrado = repositorioDeTratamento.BuscarTratamento(idParaBuscar);\r\n\r\n                    if (tratamentoEncontrado != null) {\r\n\r\n                        System.out.println(\"\\n--- Tratamento Encontrado ---\");\r\n                        System.out.println(\"ID do Tratamento: \" + tratamentoEncontrado.getId());\r\n                        System.out.println(\"ID da Consulta Associada: \" + tratamentoEncontrado.getConsulta().getid());\r\n                        System.out.println(\"Descrição: \" + tratamentoEncontrado.getDescricao());\r\n                        System.out.println(\"Usa Antibiótico: \" + (tratamentoEncontrado.isAntibiotico() ? \"Sim\" : \"Não\"));\r\n                        System.out.println(\"-----------------------------\");\r\n                    } else {\r\n\r\n                        System.out.println(\"\\nTratamento com o ID \" + idParaBuscar + \" não encontrado.\");\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"\\n--- Listar Tratamentos por Consulta ---\");\r\n                    System.out.print(\"Digite o ID da consulta para ver os tratamentos associados: \");\r\n                    int idConsultaParaListar = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa o buffer\r\n\r\n                    List<Tratamento> tratamentosDaConsulta = repositorioDeTratamento.BuscarPorConsulta(idConsultaParaListar);\r\n\r\n                    if (tratamentosDaConsulta != null && !tratamentosDaConsulta.isEmpty()) {\r\n                        System.out.println(\"\\n--- Tratamentos Encontrados para a Consulta ID: \" + idConsultaParaListar + \" ---\");\r\n\r\n                        for (Tratamento tratamento : tratamentosDaConsulta) {\r\n                            System.out.println(\"-----------------------------\");\r\n                            System.out.println(\"ID do Tratamento: \" + tratamento.getId());\r\n                            System.out.println(\"Descrição: \" + tratamento.getDescricao());\r\n                            System.out.println(\"Usa Antibiótico: \" + (tratamento.isAntibiotico() ? \"Sim\" : \"Não\"));\r\n                        }\r\n                        System.out.println(\"-----------------------------\");\r\n                    } else {\r\n\r\n                        System.out.println(\"\\nNenhum tratamento encontrado para a consulta com o ID \" + idConsultaParaListar + \".\");\r\n                    }\r\n\r\n                    break;\r\n                case 0:\r\n                    sair = true;\r\n                    System.out.println(\"Voltando ao menu principal...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Opção inválida! Tente novamente.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n        //PARTE DO RENAN - ANIMAL;\r\n        private static void exibirMenuAnimais() {\r\n        boolean sair = false;\r\n\r\n        while (!sair) {\r\n            System.out.println(\"\\n--- Menu de Animais ---\");\r\n            System.out.println(\"1. Cadastrar Animal\");\r\n            System.out.println(\"2. Listar Todos os Animais\");\r\n            System.out.println(\"3. Buscar Animal por ID\");\r\n            System.out.println(\"4. Atualizar Animal\");\r\n            System.out.println(\"5. Excluir Animal\");\r\n            System.out.println(\"6. Buscar Animais por Dono (CPF)\");\r\n            System.out.println(\"0. Voltar ao Menu Principal\");\r\n            System.out.print(\"Escolha uma opção: \");\r\n\r\n            int opcao = entrada.nextInt();\r\n            entrada.nextLine(); // Limpa o buffer\r\n\r\n            switch (opcao) {\r\n                case 1:\r\n                    System.out.println(\"--- Cadastrar Novo Animal ---\");\r\n                    System.out.print(\"Digite o CPF do Dono: \");\r\n                    String cpfDono = entrada.nextLine();\r\n                    Dono dono = repositorioDeDono.BuscarPorCPF(cpfDono);\r\n\r\n                    if (dono == null) {\r\n                        System.out.println(\"Erro: Dono com CPF \" + cpfDono + \" não encontrado.\");\r\n                        System.out.println(\"Por favor, cadastre o dono antes de cadastrar o animal.\");\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Dono encontrado: \" + dono.getNome());\r\n\r\n                    System.out.println(\"Qual o tipo de animal?\");\r\n                    System.out.println(\"1. Pet (Doméstico)\");\r\n                    System.out.println(\"2. Animal Exótico\");\r\n                    System.out.print(\"Opção: \");\r\n                    int tipo = entrada.nextInt();\r\n                    entrada.nextLine();\r\n                    System.out.print(\"Nome: \");\r\n                    String nome = entrada.nextLine();\r\n                    System.out.print(\"Espécie: \");\r\n                    String especie = entrada.nextLine();\r\n                    System.out.print(\"Porte (P, M, G): \");\r\n                    String porte = entrada.nextLine();\r\n                    System.out.print(\"Idade: \");\r\n                    int idade = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpar buffer\r\n                    Animal novoAnimal;\r\n\r\n                    if (tipo == 1) { //Só pra indentificar se é pet ou exótico (Pet = 1, Exótico = 2)\r\n                        System.out.print(\"RFID (Chip de identificação): \");\r\n                        String rfid = entrada.nextLine();\r\n                        Pet pet = new Pet();\r\n                        pet.setrfid(rfid);\r\n                        novoAnimal = pet;\r\n\r\n                    } else if (tipo == 2) {\r\n                        System.out.print(\"RFIDEX (Identificação de exótico): \");\r\n                        String rfidex = entrada.nextLine();\r\n                        System.out.print(\"Nota Fiscal: \");\r\n                        String notaFiscal = entrada.nextLine();\r\n                        Exotico exotico = new Exotico();\r\n                        exotico.setRfidex(rfidex);\r\n                        exotico.setNotaFiscal(notaFiscal);\r\n                        novoAnimal = exotico;\r\n\r\n                    } else {\r\n                        System.out.println(\"Tipo inválido. Cadastro cancelado.\");\r\n                        break;\r\n                    }\r\n                    novoAnimal.setNome(nome);\r\n                    novoAnimal.setEspecie(especie);\r\n                    novoAnimal.setPorte(porte);\r\n                    novoAnimal.setIdade(idade);\r\n                    novoAnimal.setDono(dono);\r\n                    repositorioDeAnimal.salvar(novoAnimal);\r\n                    break;\r\n\r\n                case 2:\r\n                    System.out.println(\"--- Lista de Animais Cadastrados ---\");\r\n                    List<Animal> animais = repositorioDeAnimal.ListarTodos();\r\n\r\n                    if (animais.isEmpty()) {\r\n                        System.out.println(\"Nenhum animal cadastrado.\");\r\n                    } else {\r\n\r\n                        for (Animal animal : animais) {\r\n                            System.out.println(\"--------------------\");\r\n                            System.out.println(\"ID: \" + animal.getId());\r\n                            System.out.println(\"Nome: \" + animal.getNome());\r\n                            System.out.println(\"Espécie: \" + animal.getEspecie());\r\n                            System.out.println(\"Idade: \" + animal.getIdade());\r\n\r\n\r\n                            System.out.println(\"Dono: \" + animal.getDono().getNome());\r\n                            if (animal instanceof Pet) {\r\n                                System.out.println(\"Tipo: Pet\");\r\n                                System.out.println(\"RFID: \" + ((Pet) animal).getrfid());\r\n                            } else if (animal instanceof Exotico) {\r\n                                System.out.println(\"Tipo: Exótico\");\r\n                                System.out.println(\"RFIDEX: \" + ((Exotico) animal).getRfidex());\r\n                                System.out.println(\"Nota Fiscal: \" + ((Exotico) animal).getNotaFiscal());\r\n                            }\r\n                        }\r\n                        System.out.println(\"--------------------\");\r\n                    }\r\n                    break;\r\n\r\n                case 3:\r\n                    System.out.println(\"--- Buscar Animal por ID ---\");\r\n                    System.out.print(\"Digite o ID do animal: \");\r\n                    int idBusca = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpa buffer\r\n\r\n                    Animal animalEncontrado = repositorioDeAnimal.BuscarPorId(idBusca);\r\n\r\n                    if (animalEncontrado != null) {\r\n                        System.out.println(\"Animal encontrado:\");\r\n                        System.out.println(\"ID: \" + animalEncontrado.getId());\r\n                        System.out.println(\"Nome: \" + animalEncontrado.getNome());\r\n                        System.out.println(\"Espécie: \" + animalEncontrado.getEspecie());\r\n                        System.out.println(\"Idade: \" + animalEncontrado.getIdade());\r\n\r\n                        if (animalEncontrado instanceof Pet) {\r\n                            System.out.println(\"Tipo: Pet\");\r\n                            System.out.println(\"RFID: \" + ((Pet) animalEncontrado).getrfid());\r\n                        } else if (animalEncontrado instanceof Exotico) {\r\n                            System.out.println(\"Tipo: Exótico\");\r\n                            System.out.println(\"RFIDEX: \" + ((Exotico) animalEncontrado).getRfidex());\r\n                            System.out.println(\"Nota Fiscal: \" + ((Exotico) animalEncontrado).getNotaFiscal());\r\n                        }\r\n\r\n                    } else {\r\n                        System.out.println(\"Animal com o ID \" + idBusca + \" não encontrado.\");\r\n                    }\r\n                    break;\r\n\r\n                case 4:\r\n                    System.out.println(\"--- Atualizar Animal ---\");\r\n                    System.out.print(\"Digite o ID do animal que deseja atualizar: \");\r\n                    int idAtt = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpar buffer\r\n\r\n                    Animal animalAtt = repositorioDeAnimal.BuscarPorId(idAtt);\r\n\r\n                    if (animalAtt == null) {\r\n                        System.out.println(\"Animal não encontrado.\");\r\n                        break;\r\n                    }\r\n                    System.out.println(\"Animal encontrado: \" + animalAtt.getNome());\r\n                    System.out.println(\"Deixe o campo em branco para não alterar.\");\r\n\r\n                    System.out.print(\"Novo Nome (\" + animalAtt.getNome() + \"): \");\r\n                    String nomeAtt = entrada.nextLine();\r\n                    if (!nomeAtt.trim().isEmpty()) {\r\n                        animalAtt.setNome(nomeAtt);\r\n                    }\r\n                    System.out.print(\"Nova Espécie (\" + animalAtt.getEspecie() + \"): \");\r\n                    String especieAtt = entrada.nextLine();\r\n                    if (!especieAtt.trim().isEmpty()) {\r\n                        animalAtt.setEspecie(especieAtt);\r\n                    }\r\n\r\n                    System.out.print(\"Novo Porte (\" + animalAtt.getPorte() + \"): \");\r\n                    String porteAtt = entrada.nextLine();\r\n                    if (!porteAtt.trim().isEmpty()) {\r\n                        animalAtt.setPorte(porteAtt);\r\n                    }\r\n\r\n                    System.out.print(\"Nova Idade (\" + animalAtt.getIdade() + \"): \");\r\n                    String idadeAttStr = entrada.nextLine();\r\n                    if (!idadeAttStr.trim().isEmpty()) {\r\n                        animalAtt.setIdade(Integer.parseInt(idadeAttStr));\r\n                    }\r\n                    if (animalAtt instanceof Pet) {\r\n                        System.out.print(\"Novo RFID (\" + ((Pet) animalAtt).getrfid() + \"): \");\r\n                        String rfidAtt = entrada.nextLine();\r\n                        if (!rfidAtt.trim().isEmpty()) {\r\n                            ((Pet) animalAtt).setrfid(rfidAtt);\r\n                        }\r\n                    } else if (animalAtt instanceof Exotico) {\r\n                        System.out.print(\"Novo RFIDEX (\" + ((Exotico) animalAtt).getRfidex() + \"): \");\r\n                        String rfidexAtt = entrada.nextLine();\r\n                        if (!rfidexAtt.trim().isEmpty()) {\r\n                            ((Exotico) animalAtt).setRfidex(rfidexAtt);\r\n                        }\r\n\r\n                        System.out.print(\"Nova Nota Fiscal (\" + ((Exotico) animalAtt).getNotaFiscal() + \"): \");\r\n                        String notaAtt = entrada.nextLine();\r\n                        if (!notaAtt.trim().isEmpty()) {\r\n                            ((Exotico) animalAtt).setNotaFiscal(notaAtt);\r\n                        }\r\n                    }\r\n\r\n                    repositorioDeAnimal.atualizar(animalAtt);\r\n                    System.out.println(\"Animal atualizado com sucesso!\");\r\n\r\n                    break;\r\n\r\n                case 5:\r\n                    System.out.println(\"--- Excluir Animal ---\");\r\n                    System.out.print(\"Digite o ID do animal que deseja excluir: \");\r\n                    int idDel = entrada.nextInt();\r\n                    entrada.nextLine(); // Limpar buffer\r\n\r\n                    Animal animalDel = repositorioDeAnimal.BuscarPorId(idDel); //\r\n                    if (animalDel == null) {\r\n                        System.out.println(\"Animal não encontrado.\");\r\n                        break;\r\n                    }\r\n\r\n                    System.out.println(\"Tem certeza que deseja excluir o animal: \" + animalDel.getNome() + \"? (S/N)\"); //\r\n                    String confirmacao = entrada.nextLine();\r\n\r\n                    if (confirmacao.equalsIgnoreCase(\"S\")) {\r\n                        boolean deletado = repositorioDeAnimal.deletarAnimal(idDel);\r\n                        if (deletado) {\r\n                            System.out.println(\"Animal excluído com sucesso.\");\r\n                        } else {\r\n                             System.out.println(\"Erro ao excluir animal.\");\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"Exclusão cancelada.\");\r\n                    }\r\n                    break;\r\n\r\n                case 6:\r\n                    System.out.println(\"--- Buscar Animais por Dono ---\");\r\n                    System.out.print(\"Digite o CPF do Dono: \");\r\n                    String cpfDonoBusca = entrada.nextLine();\r\n\r\n                    List<Animal> animaisDoDono = repositorioDeAnimal.BuscarPorDono(cpfDonoBusca); //\r\n\r\n                    if (animaisDoDono.isEmpty()) {\r\n                        System.out.println(\"Nenhum animal encontrado para este dono.\");\r\n                    } else {\r\n                        System.out.println(\"Animais encontrados para o CPF: \" + cpfDonoBusca);\r\n                        for (Animal animalDono : animaisDoDono) {\r\n                            System.out.println(\"--------------------\");\r\n                            System.out.println(\"ID: \" + animalDono.getId());\r\n                            System.out.println(\"Nome: \" + animalDono.getNome());\r\n                            System.out.println(\"Espécie: \" + animalDono.getEspecie());\r\n\r\n\r\n                            if (animalDono instanceof Pet) {\r\n                                System.out.println(\"Tipo: Pet\");\r\n                                System.out.println(\"RFID: \" + ((Pet) animalDono).getrfid());\r\n                            } else if (animalDono instanceof Exotico) {\r\n                                System.out.println(\"Tipo: Exótico\");\r\n                                System.out.println(\"RFIDEX: \" + ((Exotico) animalDono).getRfidex());\r\n                                System.out.println(\"Nota Fiscal: \" + ((Exotico) animalDono).getNotaFiscal());                             }\r\n                        }\r\n                        System.out.println(\"--------------------\");\r\n                    }\r\n                    break;\r\n\r\n                case 0:\r\n                    sair = true;\r\n                    System.out.println(\"Voltando ao menu principal...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Opção inválida! Tente novamente.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n            private static void exibirMenuCertificacoes() {\r\n            boolean sair = false;\r\n    \r\n            while (!sair) {\r\n                System.out.println(\"\\n--- Menu de Certificações ---\");\r\n                System.out.println(\"1. Cadastrar Certificação (Ligar Vet a Especialidade)\");\r\n                System.out.println(\"2. Listar Todas as Certificações\");\r\n                System.out.println(\"3. Buscar Certificação por Número de Registro\");\r\n                System.out.println(\"4. Listar Certificações por Veterinário (CRMV)\");\r\n                System.out.println(\"5. Excluir Certificação\");\r\n                System.out.println(\"0. Voltar ao Menu Principal\");\r\n                System.out.print(\"Escolha uma opção: \");\r\n    \r\n                int opcao = entrada.nextInt();\r\n                entrada.nextLine();\r\n\r\n            switch (opcao) {\r\n                case 1:\r\n                    System.out.println(\"--- Cadastrar (Associar) Certificação ---\");\r\n\r\n                    System.out.print(\"Digite o CRMV do Veterinário: \");\r\n                    String crmv = entrada.nextLine();\r\n                    Veterinario vet = repositorioDeVeterinario.BuscarVet(crmv); \r\n\r\n                    if (vet == null) {\r\n                        System.out.println(\"Erro: Veterinário com CRMV \" + crmv + \" não encontrado.\");\r\n                        break; \r\n                    }\r\n                    System.out.println(\"Veterinário encontrado: \" + vet.getNome()); \r\n\r\n                    System.out.print(\"Digite o ID da Especialidade (que é auto_increment): \");\r\n                    int espId = entrada.nextInt();\r\n                    entrada.nextLine(); \r\n                    Especialidade esp = repositorioDeEspecialidade.BuscarEspecialidade(espId); \r\n\r\n                    if (esp == null) {\r\n                        System.out.println(\"Erro: Especialidade com ID \" + espId + \" não encontrada.\");\r\n                        break; \r\n                    }\r\n                    System.out.println(\"Especialidade encontrada: \" + esp.getNome()); //\r\n                    System.out.print(\"Número do Registro (Ex: 'REG-DF-24-001A'): \");\r\n                    String numReg = entrada.nextLine();\r\n                    System.out.print(\"Instituição Certificadora: \");\r\n                    String inst = entrada.nextLine();\r\n                    \r\n                    System.out.print(\"Data de Obtenção (Use o formato AAAA-MM-DD): \");\r\n                    String dataStr = entrada.nextLine();\r\n                    LocalDate dataObtencao = LocalDate.parse(dataStr); \r\n\r\n                    Certificacao novaCert = new Certificacao(); \r\n                    \r\n                    novaCert.setNumeroRegistro(numReg); \r\n                    novaCert.setDataObtencao(dataObtencao); \r\n                    novaCert.setInstituicaoCertificadora(inst); \r\n                    novaCert.setVeterinario(vet); \r\n                    novaCert.setEspecialidade(esp); \r\n\r\n                    repositorioDeCertificacao.salvar(novaCert); \r\n                    \r\n                    break;\r\n                \r\n                case 2:\r\n                    System.out.println(\"--- Lista de Todas as Certificações ---\");\r\n                    List<Certificacao> certs = repositorioDeCertificacao.ListarCertificacao(); \r\n                    \r\n                    if (certs == null || certs.isEmpty()) {\r\n                        System.out.println(\"Nenhuma certificação cadastrada.\");\r\n                    } else {\r\n                        for (Certificacao cert : certs) {\r\n                            System.out.println(\"--------------------\");\r\n                            System.out.println(\"Nº Registro: \" + cert.getNumeroRegistro()); \r\n                            System.out.println(\"Veterinário: \" + (cert.getVeterinario() != null ? cert.getVeterinario().getNome() : \"N/A\")); \r\n                            System.out.println(\"Especialidade: \" + (cert.getEspecialidade() != null ? cert.getEspecialidade().getNome() : \"N/A\")); \r\n                            System.out.println(\"Instituição: \" + cert.getInstituicaoCertificadora()); \r\n                            System.out.println(\"Data: \" + cert.getDataObtencao()); \r\n                        }\r\n                        System.out.println(\"--------------------\");\r\n                    }\r\n                    break;\r\n                \r\n                case 3:\r\n                    System.out.println(\"--- Buscar Certificação por Número ---\");\r\n                    System.out.print(\"Digite o Número do Registro: \");\r\n                    String numBusca = entrada.nextLine();\r\n                    \r\n                    Certificacao certEncontrada = repositorioDeCertificacao.BuscarNumeroRegistro(numBusca); \r\n                    \r\n                    if (certEncontrada != null) {\r\n                        System.out.println(\"Certificação encontrada:\");\r\n                        System.out.println(\"Nº Registro: \" + certEncontrada.getNumeroRegistro()); \r\n                        System.out.println(\"Veterinário: \" + (certEncontrada.getVeterinario() != null ? certEncontrada.getVeterinario().getNome() : \"N/A\")); \r\n                        System.out.println(\"Especialidade: \" + (certEncontrada.getEspecialidade() != null ? certEncontrada.getEspecialidade().getNome() : \"N/A\")); \r\n                        System.out.println(\"Instituição: \" + certEncontrada.getInstituicaoCertificadora()); \r\n                        System.out.println(\"Data: \" + certEncontrada.getDataObtencao()); \r\n                    } else {\r\n                        System.out.println(\"Certificação com o registro \" + numBusca + \" não encontrada.\");\r\n                    }\r\n                    break;\r\n\r\n                case 4:\r\n                    System.out.println(\"--- Listar Certificações por Veterinário ---\");\r\n                    System.out.print(\"Digite o CRMV do Veterinário: \");\r\n                    String crmvBusca = entrada.nextLine();\r\n                    \r\n                    List<Certificacao> certsVet = repositorioDeCertificacao.BuscarPorVet(crmvBusca); \r\n                    \r\n                    if (certsVet == null || certsVet.isEmpty()) {\r\n                        System.out.println(\"Nenhuma certificação encontrada para o CRMV: \" + crmvBusca);\r\n                    } else {\r\n                        System.out.println(\"Certificações encontradas para \" + crmvBusca + \":\");\r\n                        for (Certificacao cert : certsVet) {\r\n                            System.out.println(\"--------------------\");\r\n                            System.out.println(\"Nº Registro: \" + cert.getNumeroRegistro()); \r\n                            System.out.println(\"Especialidade: \" + (cert.getEspecialidade() != null ? cert.getEspecialidade().getNome() : \"N/A\")); //\r\n                            System.out.println(\"Instituição: \" + cert.getInstituicaoCertificadora()); \r\n                        }\r\n                        System.out.println(\"--------------------\");\r\n                    }\r\n                    break;\r\n\r\n                case 5:\r\n                    System.out.println(\"--- Excluir Certificação ---\");\r\n                    System.out.print(\"Digite o Número do Registro a excluir: \");\r\n                    String idDel = entrada.nextLine(); \r\n\r\n                    System.out.println(\"Tem certeza que deseja excluir esta certificação? (S/N)\");\r\n                    String confirmacao = entrada.nextLine();\r\n\r\n                    if (confirmacao.equalsIgnoreCase(\"S\")) {\r\n                        repositorioDeCertificacao.deletarCertificacao(idDel); //\r\n                        System.out.println(\"Certificação deletada (se existia).\");\r\n                    } else {\r\n                        System.out.println(\"Exclusão cancelada.\");\r\n                    }\r\n                    break;\r\n                \r\n                case 0:\r\n                    sair = true;\r\n                    System.out.println(\"Voltando ao menu principal...\");\r\n                    break;\r\n                \r\n                default:\r\n                    System.out.println(\"Opção inválida! Tente novamente.\");\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java b/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java
--- a/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/src/main/java/org/example/ucb/cli/SistemaClinicaVet.java	(date 1760668110175)
@@ -47,23 +47,28 @@
             System.out.println("2. Gerenciar Veterinários");
             System.out.println("3. Gerenciar Animais");
             System.out.println("4. Gerenciar Tratamentos");
+            System.out.println("5. Gerenciar Especialidades"); 
+            System.out.println("6. Gerenciar Certificações"); 
+            // Adicione aqui opção para Consulta se/quando fizer
             System.out.println("0. Sair do Sistema");
             System.out.print("Escolha uma área para gerenciar: ");
 
             int opcao = entrada.nextInt();
-            entrada.nextLine();
+            entrada.nextLine(); // Limpa buffer
 
             switch (opcao) {
                 case 1: exibirMenuDono(); break;
                 case 2: exibirMenuVeterinario(); break;
                 case 3: exibirMenuAnimais(); break;
                 case 4: exibirMenuTratamentos(); break;
+                case 5: exibirMenuEspecialidades(); break; 
+                case 6: exibirMenuCertificacoes(); break; 
+                // Adicione aqui case para Consulta se/quando fizer
                 case 0: sair = true; System.out.println("Obrigado por usar o sistema!"); break;
                 default: System.out.println("Opção inválida! Tente novamente.");
             }
         }
     }
-
     //Parte do Victor Caldas - Dono
     private static void exibirMenuDono() {
         boolean sair = false;
@@ -607,6 +612,131 @@
                         System.out.println("--------------------");
                     }
                     break;
+
+                case 0:
+                    sair = true;
+                    System.out.println("Voltando ao menu principal...");
+                    break;
+                default:
+                    System.out.println("Opção inválida! Tente novamente.");
+                    break;
+            }
+        }
+    }
+    // PARTE DO VÍTOR - ESPECIALIDADES; 
+    private static void exibirMenuEspecialidades() {
+        boolean sair = false;
+        while (!sair) {
+            System.out.println("\n--- Menu de Gerenciamento de Especialidades ---");
+            System.out.println("1. Cadastrar nova especialidade");
+            System.out.println("2. Buscar especialidade por ID");
+            System.out.println("3. Listar todas as especialidades");
+            System.out.println("4. Listar especialidades de um veterinário (por CRMV)");
+            System.out.println("5. Atualizar nome da especialidade");
+            System.out.println("6. Deletar especialidade");
+            System.out.println("0. Voltar ao menu principal");
+            System.out.print("Escolha uma opção: ");
+
+            int opcao = entrada.nextInt();
+            entrada.nextLine(); // Limpa o buffer
+
+            switch (opcao) {
+                case 1:
+                    System.out.println("\n--- Cadastrar Nova Especialidade ---");
+                    System.out.print("Digite o nome da nova especialidade: ");
+                    String nomeEspecialidade = entrada.nextLine();
+
+                    Especialidade novaEspecialidade = new Especialidade(0, nomeEspecialidade);
+                    repositorioDeEspecialidade.salvar(novaEspecialidade);
+                    break;
+
+                case 2:
+                    System.out.println("\n--- Buscar Especialidade por ID ---");
+                    System.out.print("Digite o ID da especialidade que deseja buscar: ");
+                    int idParaBuscar = entrada.nextInt();
+                    entrada.nextLine(); // Limpa o buffer
+
+                    Especialidade especialidadeEncontrada = repositorioDeEspecialidade.BuscarEspecialidade(idParaBuscar);
+
+                    if (especialidadeEncontrada != null) {
+                        System.out.println("\n--- Especialidade Encontrada ---");
+                        System.out.println("ID: " + especialidadeEncontrada.getId());
+                        System.out.println("Nome: " + especialidadeEncontrada.getNome());
+                        System.out.println("--------------------------------");
+                    } else {
+                        System.out.println("\nEspecialidade com o ID " + idParaBuscar + " não encontrada.");
+                    }
+                    break;
+
+                case 3:
+                    System.out.println("\n--- Lista de Todas as Especialidades ---");
+                    List<Especialidade> todasAsEspecialidades = repositorioDeEspecialidade.ListarEspecialidade();
+
+                    if (todasAsEspecialidades != null && !todasAsEspecialidades.isEmpty()) {
+                        for (Especialidade especialidade : todasAsEspecialidades) {
+                            System.out.println("ID: " + especialidade.getId() + " | Nome: " + especialidade.getNome());
+                        }
+                        System.out.println("--------------------------------------");
+                    } else {
+                        System.out.println("\nNenhuma especialidade cadastrada no sistema.");
+                    }
+                    break;
+
+                case 4:
+                    System.out.println("\n--- Listar Especialidades por Veterinário ---");
+                    System.out.print("Digite o CRMV do veterinário: ");
+                    String crmvParaBuscar = entrada.nextLine();
+                    List<Especialidade> especialidadesDoVet = repositorioDeEspecialidade.BuscarEspPorVet(crmvParaBuscar);
+
+                    if (especialidadesDoVet != null && !especialidadesDoVet.isEmpty()) {
+                        System.out.println("\n--- Especialidades Encontradas para o CRMV: " + crmvParaBuscar + " ---");
+                        for (Especialidade especialidade : especialidadesDoVet) {
+                            System.out.println("ID: " + especialidade.getId() + " | Nome: " + especialidade.getNome());
+                        }
+                        System.out.println("----------------------------------------------------");
+                    } else {
+                        System.out.println("\nNenhuma especialidade encontrada para o veterinário com o CRMV " + crmvParaBuscar + ".");
+                    }
+                    break;
+
+                case 5:
+                     System.out.println("\n--- Atualizar Nome da Especialidade ---");
+                     System.out.print("Digite o ID da especialidade que deseja atualizar: ");
+                     int idAtt = entrada.nextInt();
+                     entrada.nextLine(); // Limpa buffer
+
+                     Especialidade espAtt = repositorioDeEspecialidade.BuscarEspecialidade(idAtt);
+                     if (espAtt == null) {
+                         System.out.println("Especialidade não encontrada.");
+                         break;
+                     }
+
+                     System.out.print("Digite o NOVO nome para a especialidade (Atual: " + espAtt.getNome() + "): ");
+                     String novoNome = entrada.nextLine();
+                     espAtt.setNome(novoNome); 
+
+                     repositorioDeEspecialidade.atualizarEspecialidade(espAtt);
+                     // Mensagem de sucesso vem do DAO
+                     break;
+
+                case 6:
+                     System.out.println("\n--- Deletar Especialidade ---");
+                     System.out.print("Digite o ID da especialidade que deseja deletar: ");
+                     int idDel = entrada.nextInt();
+                     entrada.nextLine(); // Limpa buffer
+
+                     System.out.print("Tem certeza que deseja deletar? (S/N): ");
+                     if (entrada.nextLine().equalsIgnoreCase("S")) {
+                         boolean deletado = repositorioDeEspecialidade.deletarEspecialidade(idDel);
+                         if (deletado) {
+                             System.out.println("Especialidade deletada com sucesso.");
+                         } else {
+                             System.err.println("Erro: Especialidade não encontrada ou não pôde ser deletada (verifique se está sendo usada em alguma Certificação).");
+                         }
+                     } else {
+                         System.out.println("Operação cancelada.");
+                     }
+                     break;
 
                 case 0:
                     sair = true;
Index: .idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07__Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07__Changes_.xml
new file mode 100644
--- /dev/null	(date 1760668110174)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07__Changes_.xml	(date 1760668110174)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]" date="1760666859061" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 16/10/2025 23:07 [Changes]" />
+</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1760668110173)
+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_16_10_2025_23_07_[Changes]/shelved.patch	(date 1760668110173)
@@ -0,0 +1,120 @@
+Index: src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeConsulta;\r\nimport org.example.ucb.model.Animal;\r\nimport org.example.ucb.model.Consulta;\r\nimport org.example.ucb.model.Pet;\r\nimport org.example.ucb.model.Veterinario;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RepositorioDeConsultaSQL implements RepositorioDeConsulta {\r\n    private final String BASE_SELECT_SQL =\r\n    @Override\r\n    public void salvar(Consulta consulta) {\r\n            String sql = \"INSET INTO consulta (diagnostico, id_animal, CRMV_veterinario) VALUES (?, ?, ?)\";\r\n\r\n            try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n                 PreparedStatement stmt = conexao.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\r\n\r\n                stmt.setString(1, consulta.getdiagnostico());\r\n                stmt.setInt(2, consulta.getanimal().getId());\r\n                stmt.setString(3, consulta.getveterinario().getCrmv());\r\n\r\n                int linhasAfetadas = stmt.executeUpdate();\r\n                if(linhasAfetadas > 0) {\r\n                    try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {\r\n                        if(generatedKeys.next()) {\r\n                            consulta.setid(generatedKeys.getInt(1));\r\n                        }\r\n                    }\r\n                }\r\n                System.out.println(\"Consulta salva com sucesso! ID: \" + consulta.getid());\r\n            } catch (Exception e) {\r\n                System.err.println(\"Erro ao salvar consulta: \" + e.getMessage());\r\n            }\r\n    }\r\n\r\n    @Override\r\n    public Consulta BuscarConsulta(int id) {\r\n        String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.CRMV_veterinario = v.CRMV WHERE co.id = ?\";\r\n        Consulta consulta = null;\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n\r\n            stmt.setInt(1, id);\r\n\r\n            try(ResultSet rs= stmt.executeQuery()) {\r\n                if(rs.next()) {\r\n                    consulta = new Consulta();\r\n                    Veterinario veterinario = new Veterinario();\r\n\r\n                    Animal animalDaConsulta = new Pet();\r\n                    animalDaConsulta.setId(rs.getInt(\"id_animal\"));\r\n                    animalDaConsulta.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                    veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                    veterinario.setNome(rs.getString(\"Vet_nome\"));\r\n\r\n                consulta.setid(rs.getInt(\"id\"));\r\n                consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                consulta.setanimal(animalDaConsulta);\r\n                consulta.setveterinario(veterinario);\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n        System.err.println(\"Erro ao buscar consulta por ID: \" + e.getMessage());\r\n        }\r\n        return consulta;\r\n    }\r\n\r\n    @Override\r\n    public List<Consulta> ListarConsulta() {\r\n        List<Consulta> consultas = new ArrayList<>();\r\n        String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conexao.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n\r\n                Consulta consulta = new Consulta();\r\n                Veterinario veterinario = new Veterinario();\r\n\r\n                Animal animalDaConsulta = new Pet();\r\n\r\n                animalDaConsulta.setId(rs.getInt(\"id_animal\"));\r\n                animalDaConsulta.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                veterinario.setNome(rs.getString(\"Vet_nome\"));\r\n\r\n                consulta.setid(rs.getInt(\"id\"));\r\n                consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                consulta.setanimal(animalDaConsulta);\r\n                consulta.setveterinario(veterinario);\r\n\r\n                consultas.add(consulta);\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao listar as consultas: \" + e.getMessage());\r\n        }\r\n        return consultas;\r\n    }\r\n    List<Consulta> consultas = new ArrayList<>();\r\n    String sql = \"SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV WHERE co.id_animal = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n    PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n        stmt.setInt(1, id);\r\n\r\n        try (ResultSet rs = stmt.executeQuery()) {\r\n\r\n            while (rs.next()) {\r\n\r\n                Consulta consulta = new Consulta();\r\n                Veterinario veterinario = new Veterinario();\r\n                Animal animal = new Pet();\r\n\r\n                animal.setId(rs.getInt(\"id_animal\"));\r\n                animal.setNome(rs.getString(\"animal_nome\"));\r\n\r\n                veterinario.setCrmv(rs.getString(\"CRMV_veterinario\"));\r\n                veterinario.setNome(rs.getString(\"vet_nome\"));\r\n\r\n                consulta.setid(rs.getInt(\"id\"));\r\n                consulta.setdiagnostico(rs.getString(\"diagnostico\"));\r\n\r\n                consulta.setanimal(animal);\r\n                consulta.setveterinario(veterinario);\r\n\r\n                consultas.add(consulta);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        System.err.println(\"Erro ao buscar consulta por animal: \" + e.getMessage());\r\n    }\r\n        return consultas;\r\n\r\n\r\n\r\n    String sql = \"UPDATE consulta SET diagnostico = ?, id_animal = ?, CRMV_veterinario = ? WHERE id = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n    PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n\r\n        stmt.setString(1, consulta.getdiagnostico());\r\n        stmt.setInt(2, consulta.getanimal().getId());\r\n        stmt.setString(3, consulta.getveterinario().getCrmv());\r\n        stmt.setInt(4, consulta.getid());\r\n        stmt.executeUpdate();\r\n\r\n        System.out.println(\"Cosulta ID : \" + consulta.getid() + \" atualizada com sucesso!!\");\r\n\r\n    } catch (Exception e) {\r\n        System.err.println(\"Falaha ao atualizar consulta \" + e.getMessage());\r\n    }\r\n\r\n\r\n\r\n    String sql = \"DELETE FROM consulta WHERE id = ?\";\r\n\r\n        try (Connection conexao = new ConexaoMySQL().obterConexao();\r\n    PreparedStatement stmt = conexao.prepareStatement(sql)) {\r\n        stmt.setInt(1, id);\r\n\r\n        int linhasAfetadas = stmt.executeUpdate();\r\n        return linhasAfetadas > 0;\r\n    } catch (Exception e) {\r\n        System.err.println(\"Erro ao deletar consulta: \" + e.getMessage());\r\n        return false;\r\n    }\r\n}\r\n\r\n    @Override\r\n    public List<Consulta> BuscarPorAnimal(int id) {\r\n        return List.of();\r\n    }\r\n\r\n    @Override\r\n    public void atualizarConsulta(Consulta consulta) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean deletarCertificacao(int id) {\r\n        return false;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java
+--- a/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java	(revision 60c47d6802e952179c398c8f0d36a539cd190e12)
++++ b/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java	(date 1760666769226)
+@@ -11,7 +11,7 @@
+ import java.util.List;
+ 
+ public class RepositorioDeConsultaSQL implements RepositorioDeConsulta {
+-    private final String BASE_SELECT_SQL =
++
+     @Override
+     public void salvar(Consulta consulta) {
+             String sql = "INSET INTO consulta (diagnostico, id_animal, CRMV_veterinario) VALUES (?, ?, ?)";
+@@ -78,7 +78,7 @@
+         String sql = "SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV";
+ 
+         try (Connection conexao = new ConexaoMySQL().obterConexao();
+-             PreparedStatement stmt = conexao.createStatement();
++             Statement stmt = conexao.createStatement();
+              ResultSet rs = stmt.executeQuery(sql)) {
+ 
+             while (rs.next()) {
+@@ -107,6 +107,12 @@
+         }
+         return consultas;
+     }
++
++    @Override
++     public List<Consulta> BuscarPorAnimal(int id) {
++
++
++
+     List<Consulta> consultas = new ArrayList<>();
+     String sql = "SELECT co.*, a.Nome as animal_nome, v.nome as vet_nome FROM consulta co INNER JOIN Animal a ON co.id_animal = a.ID INNER JOIN veterinario v ON co.CRMV_veterinario = v.CRMV WHERE co.id_animal = ?";
+ 
+@@ -141,6 +147,9 @@
+         System.err.println("Erro ao buscar consulta por animal: " + e.getMessage());
+     }
+         return consultas;
++    }
++@Override
++        public void atualizarConsulta(Consulta consulta) {
+ 
+ 
+ 
+@@ -160,6 +169,10 @@
+     } catch (Exception e) {
+         System.err.println("Falaha ao atualizar consulta " + e.getMessage());
+     }
++}
++
++@Override
++        public boolean deletarConsulta(int id) {
+ 
+ 
+ 
+@@ -176,19 +189,5 @@
+         return false;
+     }
+ }
+-
+-    @Override
+-    public List<Consulta> BuscarPorAnimal(int id) {
+-        return List.of();
+-    }
+-
+-    @Override
+-    public void atualizarConsulta(Consulta consulta) {
+-
+-    }
+-
+-    @Override
+-    public boolean deletarCertificacao(int id) {
+-        return false;
+-    }
+-}
++}
++
+Index: .idea/workspace.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"86cf361c-e088-429f-9f8d-71bb72083e6f\" name=\"Changes\" comment=\"inserção de métodos no RepositorioDeConsulta\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;renanzo2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/vihtyn/Clinica-Vet&quot;,\r\n    &quot;accountId&quot;: &quot;be2c7a94-2ebc-42e2-98a1-18206385c992&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"3445tZD6f2IqRK4m8zmagHCJZCh\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.SistemaClinicaVet.executor&quot;: &quot;Run&quot;,\r\n    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"86cf361c-e088-429f-9f8d-71bb72083e6f\" name=\"Changes\" comment=\"\" />\r\n      <created>1760460220715</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1760460220715</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"inserção de métodos no RepositorioDeConsulta\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1760665237722</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1760665237722</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"046b6cb9-8d9e-4b47-be9d-c29842c02849\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"046b6cb9-8d9e-4b47-be9d-c29842c02849\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"roots\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"$PROJECT_DIR$\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"inserção de métodos no RepositorioDeConsulta\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"inserção de métodos no RepositorioDeConsulta\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+--- a/.idea/workspace.xml	(revision 60c47d6802e952179c398c8f0d36a539cd190e12)
++++ b/.idea/workspace.xml	(date 1760666526609)
+@@ -6,6 +6,8 @@
+   <component name="ChangeListManager">
+     <list default="true" id="86cf361c-e088-429f-9f8d-71bb72083e6f" name="Changes" comment="inserção de métodos no RepositorioDeConsulta">
+       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
++      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java" afterDir="false" />
++      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java" afterDir="false" />
+     </list>
+     <option name="SHOW_DIALOG" value="false" />
+     <option name="HIGHLIGHT_CONFLICTS" value="true" />
+@@ -74,7 +76,15 @@
+       <option name="project" value="LOCAL" />
+       <updated>1760665237722</updated>
+     </task>
+-    <option name="localTasksCounter" value="2" />
++    <task id="LOCAL-00002" summary="inserção de métodos no RepositorioDeConsulta">
++      <option name="closed" value="true" />
++      <created>1760665829217</created>
++      <option name="number" value="00002" />
++      <option name="presentableId" value="LOCAL-00002" />
++      <option name="project" value="LOCAL" />
++      <updated>1760665829217</updated>
++    </task>
++    <option name="localTasksCounter" value="3" />
+     <servers />
+   </component>
+   <component name="Vcs.Log.Tabs.Properties">
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"86cf361c-e088-429f-9f8d-71bb72083e6f\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeCertificacao.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeCertificacao.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeCertificacaoSQL.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeCertificacaoSQL.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Animal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Animal.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Certificacao.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Certificacao.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Consulta.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/ucb/model/Consulta.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;renanzo2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/vihtyn/Clinica-Vet&quot;,\r\n    &quot;accountId&quot;: &quot;be2c7a94-2ebc-42e2-98a1-18206385c992&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"3445tZD6f2IqRK4m8zmagHCJZCh\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.SistemaClinicaVet.executor\": \"Run\",\r\n    \"ModuleVcsDetector.initialDetectionPerformed\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.TerminalTabsStorage.copyFrom.TerminalArrangementManager.252\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"Merging main\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-bf35d07a577b-intellij.indexing.shared.core-IU-252.26830.84\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"86cf361c-e088-429f-9f8d-71bb72083e6f\" name=\"Changes\" comment=\"\" />\r\n      <created>1760460220715</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1760460220715</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/.idea/workspace.xml	(date 1760668110174)
@@ -4,6 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
+    <list default="true" id="86cf361c-e088-429f-9f8d-71bb72083e6f" name="Changes" comment="inserção de métodos no RepositorioDeConsulta">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeConsulta.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java" afterDir="false" />
     <list default="true" id="86cf361c-e088-429f-9f8d-71bb72083e6f" name="Changes" comment="">
       <change afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/dao/RepositorioDeConsultaSQL.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeCertificacao.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/ucb/control/RepositorioDeCertificacao.java" afterDir="false" />
@@ -78,6 +82,15 @@
       <option name="presentableId" value="Default" />
       <updated>1760460220715</updated>
     </task>
+    <task id="LOCAL-00001" summary="inserção de métodos no RepositorioDeConsulta">
+      <option name="closed" value="true" />
+      <created>1760665237722</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1760665237722</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.ucb.dao;\r\n\r\nimport org.example.ucb.control.RepositorioDeDono;\r\nimport org.example.ucb.model.Dono;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.SQLException;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RepositorioDeDonoSQL implements RepositorioDeDono {\r\n\r\n    private static final List<Dono> DadosDosDonos = new ArrayList<>();\r\n\r\n    @Override\r\n    public void salvar(Dono dono) {\r\n        String sql = \"INSERT INTO veterinario (CPF, nome, endereco, dataNascimento) VALUES (?, ?, ?, ?)\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n            stmt.setString(1, dono.getCPF());\r\n            stmt.setString(2, dono.getNome());\r\n            stmt.setString(3, dono.getEndereco());\r\n            stmt.setDate(4, java.sql.Date.valueOf(dono.getDataNascimento()));\r\n            stmt.executeUpdate();\r\n            System.out.println(\"Dono salvo no banco de dados com sucesso!\");\r\n\r\n        } catch (Exception e) {\r\n            System.err.println(\"Erro ao salvar dono no banco de dados.\");\r\n            e.printStackTrace(); // Imprime o erro detalhado no console\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public Dono BuscarPorCPF(String Cpf) {\r\n        String sql = \"SELECT * FROM veterinario WHERE CPF = ?\";\r\n        Dono donoEncontrado = null;\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, Cpf);\r\n\r\n            try (ResultSet rs = stmt.executeQuery()) {\r\n                if (rs.next()) {\r\n                    String cpf = rs.getString(\"CPF\");\r\n                    String nome = rs.getString(\"nome\");\r\n                    String endereco = rs.getString(\"endereco\");\r\n                    LocalDate dataNascimento = rs.getDate(\"dataNascimento\").toLocalDate();\r\n\r\n                    donoEncontrado = new Dono(cpf, dataNascimento, endereco, nome);\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return donoEncontrado;\r\n    }\r\n\r\n    @Override\r\n    public List<Dono> ListarDono() {\r\n        String sql = \"SELECT * FROM dono\";\r\n        List<Dono> donos = new ArrayList<>();\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             Statement stmt = conn.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n\r\n            while (rs.next()) {\r\n                String cpf = rs.getString(\"CPF\");\r\n                String nome = rs.getString(\"nome\");\r\n                String endereco = rs.getString(\"endereco\");\r\n                LocalDate dataNascimento = rs.getDate(\"dataNascimento\").toLocalDate();\r\n\r\n                donos.add(new Dono(cpf, dataNascimento, endereco, nome));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao listar donos.\");\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return donos;\r\n    }\r\n\r\n    @Override\r\n    public List<Dono> BuscarPorAnimal(int id) {\r\n        return List.of();\r\n    }\r\n\r\n    @Override\r\n    public void atualizar(@org.jetbrains.annotations.NotNull Dono dono) {\r\n        String sql = \"UPDATE dono SET nome = ?, endereco = ?, dataNascimento = ? WHERE CPF = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao()) {\r\n            PreparedStatement stmt = conn.prepareStatement(sql);\r\n            {\r\n\r\n                stmt.setString(1, dono.getNome());\r\n                stmt.setString(2, dono.getEndereco());\r\n                stmt.setDate(4, java.sql.Date.valueOf(dono.getDataNascimento()));\r\n                stmt.setString(4, dono.getCPF());\r\n\r\n                int linhasAfetadas = stmt.executeUpdate();\r\n                if (linhasAfetadas > 0) {\r\n                    System.out.println(\"Dono atualizado com sucesso!\");\r\n                } else {\r\n                    System.out.println(\"Nenhum dono encontrado com esse CPF!\");\r\n                }\r\n\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean deletarDono(String Cpf) {\r\n        String sql = \"DELETE FROM dono WHERE CPF = ?\";\r\n\r\n        try (Connection conn = new ConexaoMySQL().obterConexao();\r\n             PreparedStatement stmt = conn.prepareStatement(sql)) {\r\n\r\n            stmt.setString(1, Cpf);\r\n            int linhasAfetadas = stmt.executeUpdate();\r\n            return linhasAfetadas > 0;\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Erro ao deletar dono.\");\r\n            e.printStackTrace();\r\n            return false;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java b/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java
--- a/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java	(revision d9ce1d987dd48ba170d4ce6abd3c649d375e3a2b)
+++ b/src/main/java/org/example/ucb/dao/RepositorioDeDonoSQL.java	(date 1760668110178)
@@ -14,52 +14,47 @@
 
 public class RepositorioDeDonoSQL implements RepositorioDeDono {
 
-    private static final List<Dono> DadosDosDonos = new ArrayList<>();
-
     @Override
     public void salvar(Dono dono) {
-        String sql = "INSERT INTO veterinario (CPF, nome, endereco, dataNascimento) VALUES (?, ?, ?, ?)";
+        String sql = "INSERT INTO dono (CPF, Nome, Endereco, data_nasc) VALUES (?, ?, ?, ?)";
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
             stmt.setString(1, dono.getCPF());
             stmt.setString(2, dono.getNome());
             stmt.setString(3, dono.getEndereco());
-            stmt.setDate(4, java.sql.Date.valueOf(dono.getDataNascimento()));
+            stmt.setObject(4, dono.getDataNascimento());
             stmt.executeUpdate();
             System.out.println("Dono salvo no banco de dados com sucesso!");
 
         } catch (Exception e) {
-            System.err.println("Erro ao salvar dono no banco de dados.");
-            e.printStackTrace(); // Imprime o erro detalhado no console
+            System.err.println("Erro ao salvar dono no banco de dados: " + e.getMessage());
         }
     }
 
 
     @Override
-    public Dono BuscarPorCPF(String Cpf) {
-        String sql = "SELECT * FROM veterinario WHERE CPF = ?";
+    public Dono BuscarPorCPF(String cpf) {
+        String sql = "SELECT * FROM dono WHERE CPF = ?";
         Dono donoEncontrado = null;
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-            stmt.setString(1, Cpf);
+            stmt.setString(1, cpf);
 
             try (ResultSet rs = stmt.executeQuery()) {
                 if (rs.next()) {
-                    String cpf = rs.getString("CPF");
-                    String nome = rs.getString("nome");
-                    String endereco = rs.getString("endereco");
-                    LocalDate dataNascimento = rs.getDate("dataNascimento").toLocalDate();
+                    String cpfEncontrado = rs.getString("CPF");
+                    String nome = rs.getString("Nome");
+                    String endereco = rs.getString("Endereco");
+                    LocalDate dataNascimento = rs.getDate("data_nasc").toLocalDate();
 
-                    donoEncontrado = new Dono(cpf, dataNascimento, endereco, nome);
+                    donoEncontrado = new Dono(cpfEncontrado, dataNascimento, endereco, nome);
                 }
             }
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
         } catch (Exception e) {
-            throw new RuntimeException(e);
+             System.err.println("Erro ao buscar dono por CPF: " + e.getMessage());
         }
         return donoEncontrado;
     }
@@ -75,72 +70,67 @@
 
             while (rs.next()) {
                 String cpf = rs.getString("CPF");
-                String nome = rs.getString("nome");
-                String endereco = rs.getString("endereco");
-                LocalDate dataNascimento = rs.getDate("dataNascimento").toLocalDate();
+                String nome = rs.getString("Nome");
+                String endereco = rs.getString("Endereco");
+                LocalDate dataNascimento = rs.getDate("data_nasc").toLocalDate();
 
                 donos.add(new Dono(cpf, dataNascimento, endereco, nome));
             }
-        } catch (SQLException e) {
-            System.err.println("Erro ao listar donos.");
-            e.printStackTrace();
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            System.err.println("Erro ao listar donos: " + e.getMessage());
         }
         return donos;
     }
 
     @Override
     public List<Dono> BuscarPorAnimal(int id) {
-        return List.of();
+        System.out.println("Atenção: Método BuscarPorAnimal ainda não implementado!");
+        return new ArrayList<>();
     }
 
     @Override
-    public void atualizar(@org.jetbrains.annotations.NotNull Dono dono) {
-        String sql = "UPDATE dono SET nome = ?, endereco = ?, dataNascimento = ? WHERE CPF = ?";
+    public void atualizar(Dono dono) {
+        String sql = "UPDATE dono SET Nome = ?, Endereco = ?, data_nasc = ? WHERE CPF = ?";
 
-        try (Connection conn = new ConexaoMySQL().obterConexao()) {
-            PreparedStatement stmt = conn.prepareStatement(sql);
-            {
+        try (Connection conn = new ConexaoMySQL().obterConexao();
+             PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-                stmt.setString(1, dono.getNome());
-                stmt.setString(2, dono.getEndereco());
-                stmt.setDate(4, java.sql.Date.valueOf(dono.getDataNascimento()));
-                stmt.setString(4, dono.getCPF());
+            stmt.setString(1, dono.getNome());
+            stmt.setString(2, dono.getEndereco());
+            stmt.setObject(3, dono.getDataNascimento());
+            stmt.setString(4, dono.getCPF());
 
-                int linhasAfetadas = stmt.executeUpdate();
-                if (linhasAfetadas > 0) {
-                    System.out.println("Dono atualizado com sucesso!");
-                } else {
-                    System.out.println("Nenhum dono encontrado com esse CPF!");
-                }
-
+            int linhasAfetadas = stmt.executeUpdate();
+            if (linhasAfetadas > 0) {
+                System.out.println("Dono atualizado com sucesso!");
+            } else {
+                System.err.println("Nenhum dono encontrado com o CPF " + dono.getCPF() + " para atualizar.");
             }
 
-        } catch (SQLException e) {
-            throw new RuntimeException(e);
         } catch (Exception e) {
-            throw new RuntimeException(e);
+             System.err.println("Erro ao atualizar dono: " + e.getMessage());
         }
     }
 
     @Override
-    public boolean deletarDono(String Cpf) {
+    public boolean deletarDono(String cpf) {
         String sql = "DELETE FROM dono WHERE CPF = ?";
 
         try (Connection conn = new ConexaoMySQL().obterConexao();
              PreparedStatement stmt = conn.prepareStatement(sql)) {
 
-            stmt.setString(1, Cpf);
+            stmt.setString(1, cpf);
             int linhasAfetadas = stmt.executeUpdate();
+            if(linhasAfetadas > 0) {
+                System.out.println("Dono com CPF " + cpf + " deletado com sucesso.");
+            } else {
+                 System.err.println("Nenhum dono encontrado com o CPF " + cpf + " para deletar.");
+            }
             return linhasAfetadas > 0;
 
-        } catch (SQLException e) {
-            System.err.println("Erro ao deletar dono.");
-            e.printStackTrace();
+        } catch (Exception e) {
+            System.err.println("Erro ao deletar dono: " + e.getMessage());
             return false;
-        } catch (Exception e) {
-            throw new RuntimeException(e);
         }
     }
-}
\ No newline at end of file
+}
